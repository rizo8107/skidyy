{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as queryString from 'query-string';\nimport { validatePathConfig } from \"./validatePathConfig.js\";\nvar _getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return _getActiveRoute(route.state);\n  }\n  return route;\n};\nvar cachedNormalizedConfigs = new WeakMap();\nvar getNormalizedConfigs = function getNormalizedConfigs(options) {\n  if (!(options != null && options.screens)) return {};\n  var cached = cachedNormalizedConfigs.get(options == null ? void 0 : options.screens);\n  if (cached) return cached;\n  var normalizedConfigs = createNormalizedConfigs(options.screens);\n  cachedNormalizedConfigs.set(options.screens, normalizedConfigs);\n  return normalizedConfigs;\n};\nexport function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  if (options) {\n    validatePathConfig(options);\n  }\n  var configs = getNormalizedConfigs(options);\n  var path = '/';\n  var current = state;\n  var allParams = {};\n  var _loop = function _loop() {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var pattern;\n    var focusedParams;\n    var focusedRoute = _getActiveRoute(state);\n    var currentOptions = configs;\n    var nestedRouteNames = [];\n    var hasNext = true;\n    var _loop2 = function _loop2() {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n      if (route.params) {\n        var _currentOptions$route;\n        var stringify = (_currentOptions$route = currentOptions[route.name]) == null ? void 0 : _currentOptions$route.stringify;\n        var currentParams = Object.fromEntries(Object.entries(route.params).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n          return [key, stringify != null && stringify[key] ? stringify[key](value) : String(value)];\n        }));\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n        if (focusedRoute === route) {\n          var _pattern;\n          focusedParams = _objectSpread({}, currentParams);\n          (_pattern = pattern) == null ? void 0 : _pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).forEach(function (p) {\n            var name = getParamName(p);\n            if (focusedParams) {\n              delete focusedParams[name];\n            }\n          });\n        }\n      }\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        var nextRoute = route.state.routes[index];\n        var nestedConfig = currentOptions[route.name].screens;\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    };\n    while (route.name in currentOptions && hasNext) {\n      _loop2();\n    }\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(function (p) {\n        var name = getParamName(p);\n        if (p === '*') {\n          return route.name;\n        }\n        if (p.startsWith(':')) {\n          var value = allParams[name];\n          if (value === undefined && p.endsWith('?')) {\n            return '';\n          }\n          return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, function (char) {\n            return encodeURIComponent(char);\n          });\n        }\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (var param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n      var query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n    current = route.state;\n  };\n  while (current) {\n    _loop();\n  }\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  if (options != null && options.path) {\n    path = joinPaths(options.path, path);\n  }\n  return path;\n}\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\nvar joinPaths = function joinPaths() {\n  var _ref3;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar createConfigItem = function createConfigItem(config, parentPattern) {\n  if (typeof config === 'string') {\n    var _pattern2 = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern: _pattern2\n    };\n  }\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n  var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: pattern == null ? void 0 : pattern.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n  return Object.fromEntries(Object.entries(options).map(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      name = _ref5[0],\n      c = _ref5[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"names":["queryString","validatePathConfig","getActiveRoute","state","route","index","routes","length","cachedNormalizedConfigs","WeakMap","getNormalizedConfigs","options","screens","cached","get","normalizedConfigs","createNormalizedConfigs","set","getPathFromState","Error","configs","path","current","allParams","_loop","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","_loop2","name","push","params","_currentOptions$route","stringify","currentParams","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","key","value","String","assign","_pattern","_objectSpread","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","replace","char","encodeURIComponent","param","query","sort","joinPaths","_ref3","_len","arguments","paths","Array","_key","concat","apply","_toConsumableArray","Boolean","createConfigItem","config","parentPattern","exact","_ref4","_ref5","c","result"],"sources":["d:\\Code\\SKiddy V2\\node_modules\\@react-navigation\\core\\src\\getPathFromState.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport type { PathConfig, PathConfigMap } from './types';\nimport { validatePathConfig } from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nconst cachedNormalizedConfigs = new WeakMap<\n  PathConfigMap<{}>,\n  Record<string, ConfigItem>\n>();\n\nconst getNormalizedConfigs = (options?: Options<{}>) => {\n  if (!options?.screens) return {};\n\n  const cached = cachedNormalizedConfigs.get(options?.screens);\n\n  if (cached) return cached;\n\n  const normalizedConfigs = createNormalizedConfigs(options.screens);\n\n  cachedNormalizedConfigs.set(options.screens, normalizedConfigs);\n\n  return normalizedConfigs;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const configs = getNormalizedConfigs(options);\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    const focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    const nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = Object.fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            // Valid characters according to\n            // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n            return String(value).replace(\n              /[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g,\n              (char) => encodeURIComponent(char)\n            );\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  // Include the root path if specified\n  if (options?.path) {\n    path = joinPaths(options.path, path);\n  }\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}