{"ast":null,"code":"import React from 'react';\nimport { isNewWebImplementationEnabled } from \"./EnableNewWebImplementation\";\nimport { Gestures, HammerGestures } from \"./web/Gestures\";\nimport InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport { GestureHandlerWebDelegate } from \"./web/tools/GestureHandlerWebDelegate\";\nvar shouldPreventDrop = false;\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass(new GestureHandlerWebDelegate()));\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof Element || newView instanceof React.Component)) {\n      shouldPreventDrop = true;\n      var handler = isNewWebImplementationEnabled() ? NodeManager.getHandler(handlerTag) : HammerNodeManager.getHandler(handlerTag);\n      var handlerName = handler.constructor.name;\n      throw new Error(`${handlerName} with tag ${handlerTag} received child that is not valid HTML element.`);\n    }\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (shouldPreventDrop) {\n      return;\n    }\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"names":["React","isNewWebImplementationEnabled","Gestures","HammerGestures","InteractionManager","NodeManager","HammerNodeManager","GestureHandlerWebDelegate","shouldPreventDrop","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","Element","Component","handler","constructor","name","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["f:\\Coding\\Code\\SKiddy V2\\node_modules\\react-native-gesture-handler\\lib\\module\\RNGestureHandlerModule.web.ts"],"sourcesContent":["import React from 'react';\n\nimport type { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\nimport { Gestures, HammerGestures } from './web/Gestures';\nimport type { Config } from './web/interfaces';\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport { GestureHandlerWebDelegate } from './web/tools/GestureHandlerWebDelegate';\n\n// init method is called inside attachGestureHandler function. However, this function may\n// fail when received view is not valid HTML element. On the other hand, dropGestureHandler\n// will be called even if attach failed, which will result in crash.\n//\n// We use this flag to check whether or not dropGestureHandler should be called.\nlet shouldPreventDrop = false;\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(\n        handlerTag,\n        new GestureClass(new GestureHandlerWebDelegate())\n      );\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (!(newView instanceof Element || newView instanceof React.Component)) {\n      shouldPreventDrop = true;\n\n      const handler = isNewWebImplementationEnabled()\n        ? NodeManager.getHandler(handlerTag)\n        : HammerNodeManager.getHandler(handlerTag);\n\n      const handlerName = handler.constructor.name;\n\n      throw new Error(\n        `${handlerName} with tag ${handlerTag} received child that is not valid HTML element.`\n      );\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      // @ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      // @ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (shouldPreventDrop) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}