{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport { findFocusedRoute } from \"./findFocusedRoute.js\";\nimport { validatePathConfig } from \"./validatePathConfig.js\";\nexport function getStateFromPath(path, options) {\n  var _options$path;\n  var _getConfigResources = getConfigResources(options),\n    initialRoutes = _getConfigResources.initialRoutes,\n    configs = _getConfigResources.configs,\n    configWithRegexes = _getConfigResources.configWithRegexes;\n  var screens = options == null ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  var prefix = options == null ? void 0 : (_options$path = options.path) == null ? void 0 : _options$path.replace(/^\\//, '');\n  if (prefix) {\n    var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) != null && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configWithRegexes),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar cachedConfigResources = new WeakMap();\nfunction getConfigResources(options) {\n  if (!options) return prepareConfigResources();\n  var cached = cachedConfigResources.get(options);\n  if (cached) return cached;\n  var resources = prepareConfigResources(options);\n  cachedConfigResources.set(options, resources);\n  return resources;\n}\nfunction prepareConfigResources(options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  var initialRoutes = getInitialRoutes(options);\n  var configs = getNormalizedConfigs(initialRoutes, options == null ? void 0 : options.screens);\n  checkForDuplicatedConfigs(configs);\n  var configWithRegexes = getConfigsWithRegexes(configs);\n  return {\n    initialRoutes: initialRoutes,\n    configs: configs,\n    configWithRegexes: configWithRegexes\n  };\n}\nfunction getInitialRoutes(options) {\n  var initialRoutes = [];\n  if (options != null && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  return initialRoutes;\n}\nfunction getNormalizedConfigs(initialRoutes) {\n  var _ref;\n  var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return _createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n}\nfunction checkForDuplicatedConfigs(configs) {\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n}\nfunction getConfigsWithRegexes(configs) {\n  return configs.map(function (c) {\n    return _objectSpread(_objectSpread({}, c), {}, {\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    });\n  });\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop(config) {\n      if (!config.regex) {\n        return 0;\n      }\n      var match = remainingPath.match(config.regex);\n      if (match) {\n        var _config$pattern;\n        var matchResult = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').reduce(function (acc, p, index) {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n          acc.pos += 1;\n          var decodedParamSegment = decodeURIComponent(match[(acc.pos + 1) * 2].replace(/\\/$/, ''));\n          Object.assign(acc.matchedParams, _defineProperty({}, p, Object.assign(acc.matchedParams[p] || {}, _defineProperty({}, index, decodedParamSegment))));\n          return acc;\n        }, {\n          pos: -1,\n          matchedParams: {}\n        });\n        var matchedParams = matchResult.matchedParams || {};\n        routes = config.routeNames.map(function (name) {\n          var _routeConfig$pattern$;\n          var routeConfig = configs.find(function (c) {\n            return c.screen === name && config.pattern.startsWith(c.pattern);\n          });\n          var normalizedPath = routeConfig == null ? void 0 : routeConfig.path.split('/').filter(Boolean).join('/');\n          var numInitialSegments = routeConfig == null ? void 0 : (_routeConfig$pattern$ = routeConfig.pattern.replace(new RegExp(`${escape(normalizedPath)}$`), '')) == null ? void 0 : _routeConfig$pattern$.split('/').length;\n          var params = normalizedPath == null ? void 0 : normalizedPath.split('/').reduce(function (acc, p, index) {\n            var _matchedParams$p;\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n            var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            var value = (_matchedParams$p = matchedParams[p]) == null ? void 0 : _matchedParams$p[index + offset];\n            if (value) {\n              var _routeConfig$parse;\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig != null && (_routeConfig$parse = routeConfig.parse) != null && _routeConfig$parse[key] ? routeConfig.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            return {\n              name: name,\n              params: params\n            };\n          }\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1;\n      }\n    },\n    _ret;\n  for (var config of configs) {\n    _ret = _loop(config);\n    if (_ret === 0) continue;\n    if (_ret === 1) break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern2;\n        var result = _createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(`^(${pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  var state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","_options$path","_getConfigResources","getConfigResources","initialRoutes","configs","configWithRegexes","screens","remaining","replace","endsWith","prefix","normalizedPrefix","startsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","match","find","config","routeNames","every","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","remainingPath","cachedConfigResources","WeakMap","prepareConfigResources","cached","get","resources","set","getInitialRoutes","getNormalizedConfigs","checkForDuplicatedConfigs","getConfigsWithRegexes","initialRouteName","push","parentScreens","_ref","arguments","concat","apply","_toConsumableArray","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","join","localeCompare","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","intersects","it","Error","assign","_defineProperty","_objectSpread","regex","RegExp","source","joinPaths","_ref2","_len","paths","Array","_key","p","_loop","_config$pattern","matchResult","index","pos","decodedParamSegment","matchedParams","_routeConfig$pattern$","routeConfig","normalizedPath","numInitialSegments","params","_matchedParams$p","offset","value","_routeConfig$parse","parse","_ret","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern2","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["f:\\Coding\\Code\\SKiddy V2\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport { findFocusedRoute } from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport { validatePathConfig } from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\ntype ConfigResources = {\n  initialRoutes: InitialRouteConfig[];\n  configs: RouteConfig[];\n  configWithRegexes: RouteConfig[];\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  const { initialRoutes, configs, configWithRegexes } =\n    getConfigResources(options);\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n  if (prefix) {\n    // Make sure there is a trailing slash\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n    // If the path doesn't start with the prefix, it's not a match\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n\n    // Remove the prefix from the path\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configWithRegexes\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\n/**\n * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n */\nconst cachedConfigResources = new WeakMap<Options<{}>, ConfigResources>();\n\nfunction getConfigResources<ParamList extends {}>(\n  options: Options<ParamList> | undefined\n) {\n  if (!options) return prepareConfigResources();\n\n  const cached = cachedConfigResources.get(options);\n\n  if (cached) return cached;\n\n  const resources = prepareConfigResources(options);\n\n  cachedConfigResources.set(options, resources);\n\n  return resources;\n}\n\nfunction prepareConfigResources(options?: Options<{}>) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const initialRoutes = getInitialRoutes(options);\n\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens);\n\n  checkForDuplicatedConfigs(configs);\n\n  const configWithRegexes = getConfigsWithRegexes(configs);\n\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes,\n  };\n}\n\nfunction getInitialRoutes(options?: Options<{}>) {\n  const initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  return initialRoutes;\n}\n\nfunction getNormalizedConfigs(\n  initialRoutes: InitialRouteConfig[],\n  screens: PathConfigMap<object> = {}\n) {\n  // Create a normalized configs array which will be easier to use\n  return ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n}\n\nfunction checkForDuplicatedConfigs(configs: RouteConfig[]) {\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n}\n\nfunction getConfigsWithRegexes(configs: RouteConfig[]) {\n  return configs.map((c) => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n  }));\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  const state: InitialState = createStateObject(\n    initialRoute,\n    route,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}