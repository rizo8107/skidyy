{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS };\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function lockAsync(_x) {\n  return _lockAsync.apply(this, arguments);\n}\nfunction _lockAsync() {\n  _lockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.lockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n    }\n    var orientationLocks = Object.values(OrientationLock);\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    if (orientationLock === OrientationLock.OTHER) {\n      return;\n    }\n    yield ExpoScreenOrientation.lockAsync(orientationLock);\n    _lastOrientationLock = orientationLock;\n  });\n  return _lockAsync.apply(this, arguments);\n}\nexport function lockPlatformAsync(_x2) {\n  return _lockPlatformAsync.apply(this, arguments);\n}\nfunction _lockPlatformAsync() {\n  _lockPlatformAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoScreenOrientation.lockPlatformAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n    }\n    var screenOrientationConstantAndroid = options.screenOrientationConstantAndroid,\n      screenOrientationArrayIOS = options.screenOrientationArrayIOS,\n      screenOrientationLockWeb = options.screenOrientationLockWeb;\n    var platformOrientationParam;\n    if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n      if (isNaN(screenOrientationConstantAndroid)) {\n        throw new TypeError(`lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`);\n      }\n      platformOrientationParam = screenOrientationConstantAndroid;\n    } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n      if (!Array.isArray(screenOrientationArrayIOS)) {\n        throw new TypeError(`lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`);\n      }\n      var orientations = Object.values(Orientation);\n      for (var orientation of screenOrientationArrayIOS) {\n        if (!orientations.includes(orientation)) {\n          throw new TypeError(`lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`);\n        }\n      }\n      platformOrientationParam = screenOrientationArrayIOS;\n    } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n      var webOrientationLocks = Object.values(WebOrientationLock);\n      if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n        throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n      }\n      platformOrientationParam = screenOrientationLockWeb;\n    }\n    if (!platformOrientationParam) {\n      throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n    }\n    yield ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n    _lastOrientationLock = OrientationLock.OTHER;\n  });\n  return _lockPlatformAsync.apply(this, arguments);\n}\nexport function unlockAsync() {\n  return _unlockAsync.apply(this, arguments);\n}\nfunction _unlockAsync() {\n  _unlockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.lockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n    }\n    yield ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n  });\n  return _unlockAsync.apply(this, arguments);\n}\nexport function getOrientationAsync() {\n  return _getOrientationAsync.apply(this, arguments);\n}\nfunction _getOrientationAsync() {\n  _getOrientationAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n    }\n    return yield ExpoScreenOrientation.getOrientationAsync();\n  });\n  return _getOrientationAsync.apply(this, arguments);\n}\nexport function getOrientationLockAsync() {\n  return _getOrientationLockAsync.apply(this, arguments);\n}\nfunction _getOrientationLockAsync() {\n  _getOrientationLockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationLockAsync) {\n      return _lastOrientationLock;\n    }\n    return yield ExpoScreenOrientation.getOrientationLockAsync();\n  });\n  return _getOrientationLockAsync.apply(this, arguments);\n}\nexport function getPlatformOrientationLockAsync() {\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\nfunction _getPlatformOrientationLockAsync() {\n  _getPlatformOrientationLockAsync = _asyncToGenerator(function* () {\n    var platformOrientationLock = yield ExpoScreenOrientation.getPlatformOrientationLockAsync();\n    if (Platform.OS === 'android') {\n      return {\n        screenOrientationConstantAndroid: platformOrientationLock\n      };\n    } else if (Platform.OS === 'ios') {\n      return {\n        screenOrientationArrayIOS: platformOrientationLock\n      };\n    } else if (Platform.OS === 'web') {\n      return {\n        screenOrientationLockWeb: platformOrientationLock\n      };\n    } else {\n      return {};\n    }\n  });\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\nexport function supportsOrientationLockAsync(_x3) {\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\nfunction _supportsOrientationLockAsync() {\n  _supportsOrientationLockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n    }\n    var orientationLocks = Object.values(OrientationLock);\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    return yield ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n  });\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  var subscription = createDidUpdateDimensionsSubscription(listener);\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {\n    return sub !== subscription;\n  });\n}\nfunction createDidUpdateDimensionsSubscription(listener) {\n  if (Platform.OS === 'web' || Platform.OS === 'ios') {\n    return ExpoScreenOrientation.addListener('expoDidUpdateDimensions', function () {\n      var _ref = _asyncToGenerator(function* (update) {\n        listener(update);\n      });\n      return function (_x4) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  return Dimensions.addEventListener('change', _asyncToGenerator(function* () {\n    var _yield$Promise$all = yield Promise.all([getOrientationLockAsync(), getOrientationAsync()]),\n      _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n      orientationLock = _yield$Promise$all2[0],\n      orientation = _yield$Promise$all2[1];\n    listener({\n      orientationInfo: {\n        orientation: orientation\n      },\n      orientationLock: orientationLock\n    });\n  }));\n}","map":{"version":3,"names":["Platform","UnavailabilityError","Dimensions","ExpoScreenOrientation","Orientation","OrientationLock","WebOrientationLock","WebOrientation","SizeClassIOS","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","lockAsync","_x","_lockAsync","apply","arguments","_asyncToGenerator","orientationLock","orientationLocks","Object","values","includes","TypeError","OTHER","lockPlatformAsync","_x2","_lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","platformOrientationParam","OS","isNaN","Array","isArray","orientations","orientation","webOrientationLocks","unlockAsync","_unlockAsync","DEFAULT","getOrientationAsync","_getOrientationAsync","getOrientationLockAsync","_getOrientationLockAsync","getPlatformOrientationLockAsync","_getPlatformOrientationLockAsync","platformOrientationLock","supportsOrientationLockAsync","_x3","_supportsOrientationLockAsync","addOrientationChangeListener","listener","subscription","createDidUpdateDimensionsSubscription","push","removeOrientationChangeListeners","i","length","subscriber","remove","pop","removeOrientationChangeListener","filter","sub","addListener","_ref","update","_x4","addEventListener","_yield$Promise$all","Promise","all","_yield$Promise$all2","_slicedToArray","orientationInfo"],"sources":["d:\\Code\\SKiddy V2\\node_modules\\expo-screen-orientation\\src\\ScreenOrientation.ts"],"sourcesContent":["import { Platform, type EventSubscription, UnavailabilityError } from 'expo-modules-core';\nimport { Dimensions } from 'react-native';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationLock,\n  PlatformOrientationInfo,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n  EventSubscription as Subscription,\n};\n\nlet _orientationChangeSubscribers: EventSubscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\n// @needsAudit\n/**\n * Lock the screen orientation to a particular `OrientationLock`.\n * @param orientationLock The orientation lock to apply. See the [`OrientationLock`](#orientationlock)\n * enum for possible values.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * @example\n * ```ts\n * async function changeScreenOrientation() {\n *   await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);\n * }\n * ```\n */\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\n// @needsAudit @docsMissing\n/**\n * @param options The platform specific lock to apply. See the [`PlatformOrientationInfo`](#platformorientationinfo)\n * object type for the different platform formats.\n * @return Returns a promise with `void` value, resolving when the orientation is set and rejecting\n * if an invalid option or value is passed.\n */\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const { screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb } =\n    options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\n// @needsAudit\n/**\n * Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n */\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation.\n * @return Returns a promise that fulfils with an [`Orientation`](#orientation)\n * value that reflects the current screen orientation.\n */\nexport async function getOrientationAsync(): Promise<Orientation> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation lock type.\n * @return Returns a promise which fulfils with an [`OrientationLock`](#orientationlock)\n * value.\n */\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\n// @needsAudit\n/**\n * Gets the platform specific screen orientation lock type.\n * @return Returns a promise which fulfils with a [`PlatformOrientationInfo`](#platformorientationinfo)\n * value.\n */\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\n// @needsAudit @docsMissing\n/**\n * Returns whether the [`OrientationLock`](#orientationlock) policy is supported on\n * the device.\n * @param orientationLock\n * @return Returns a promise that resolves to a `boolean` value that reflects whether or not the\n * orientationLock is supported.\n */\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n// @needsAudit\n/**\n * Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape`\n * or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation\n * change from `portrait up` to `portrait down`, but it will be called when there was a change from\n * `portrait up` to `landscape left`.\n * @param listener Each orientation update will pass an object with the new [`OrientationChangeEvent`](#orientationchangeevent)\n * to the listener.\n */\nexport function addOrientationChangeListener(\n  listener: OrientationChangeListener\n): EventSubscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n\n  const subscription = createDidUpdateDimensionsSubscription(listener);\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n// @needsAudit\n/**\n * Removes all listeners subscribed to orientation change updates.\n */\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\n// @needsAudit\n/**\n * Unsubscribes the listener associated with the `Subscription` object from all orientation change\n * updates.\n * @param subscription A subscription object that manages the updates passed to a listener function\n * on an orientation change.\n */\nexport function removeOrientationChangeListener(subscription: EventSubscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(\n    (sub) => sub !== subscription\n  );\n}\n\nfunction createDidUpdateDimensionsSubscription(\n  listener: OrientationChangeListener\n): EventSubscription {\n  if (Platform.OS === 'web' || Platform.OS === 'ios') {\n    return ExpoScreenOrientation.addListener(\n      'expoDidUpdateDimensions',\n      async (update: OrientationChangeEvent) => {\n        listener(update);\n      }\n    );\n  }\n\n  // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n  return Dimensions.addEventListener('change', async () => {\n    const [orientationLock, orientation] = await Promise.all([\n      getOrientationLockAsync(),\n      getOrientationAsync(),\n    ]);\n    listener({ orientationInfo: { orientation }, orientationLock });\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}