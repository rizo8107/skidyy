{"ast":null,"code":"import { registerHandler } from \"../../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../../RNGestureHandlerModule\";\nimport { filterConfig, scheduleFlushOperations } from \"../../utils\";\nimport { ghQueueMicrotask } from \"../../../ghQueueMicrotask\";\nimport { extractGestureRelations, checkGestureCallbacksForWorklets, ALLOWED_PROPS } from \"./utils\";\nexport function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n  gestureConfig.prepare();\n  for (var i = 0; i < newGestures.length; i++) {\n    var handler = preparedGesture.attachedGestures[i];\n    checkGestureCallbacksForWorklets(handler);\n    if (newGestures[i].handlerTag !== handler.handlerTag) {\n      newGestures[i].handlerTag = handler.handlerTag;\n      newGestures[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    var shouldUpdateSharedValueIfUsed = preparedGesture.attachedGestures.length !== newGestures.length;\n    for (var _i = 0; _i < newGestures.length; _i++) {\n      var _handler = preparedGesture.attachedGestures[_i];\n      if (_handler.handlers.gestureId !== newGestures[_i].handlers.gestureId && (newGestures[_i].shouldUseReanimated || _handler.shouldUseReanimated)) {\n        shouldUpdateSharedValueIfUsed = true;\n      }\n      _handler.config = newGestures[_i].config;\n      _handler.handlers = newGestures[_i].handlers;\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, extractGestureRelations(_handler)));\n      registerHandler(_handler.handlerTag, _handler, _handler.config.testId);\n    }\n    if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n      var newHandlersValue = preparedGesture.attachedGestures.filter(function (g) {\n        return g.shouldUseReanimated;\n      }).map(function (g) {\n        return g.handlers;\n      });\n      preparedGesture.animatedHandlers.value = newHandlersValue;\n    }\n    scheduleFlushOperations();\n  });\n}","map":{"version":3,"names":["registerHandler","RNGestureHandlerModule","filterConfig","scheduleFlushOperations","ghQueueMicrotask","extractGestureRelations","checkGestureCallbacksForWorklets","ALLOWED_PROPS","updateHandlers","preparedGesture","gestureConfig","newGestures","prepare","i","length","handler","attachedGestures","handlerTag","handlers","isMounted","shouldUpdateSharedValueIfUsed","gestureId","shouldUseReanimated","config","updateGestureHandler","testId","animatedHandlers","newHandlersValue","filter","g","map","value"],"sources":["f:\\Coding\\Code\\SKiddy V2\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\GestureDetector\\updateHandlers.ts"],"sourcesContent":["import { GestureType, HandlerCallbacks } from '../gesture';\nimport { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ComposedGesture } from '../gestureComposition';\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { AttachedGestureState } from './types';\nimport {\n  extractGestureRelations,\n  checkGestureCallbacksForWorklets,\n  ALLOWED_PROPS,\n} from './utils';\n\nexport function updateHandlers(\n  preparedGesture: AttachedGestureState,\n  gestureConfig: ComposedGesture | GestureType,\n  newGestures: GestureType[]\n) {\n  gestureConfig.prepare();\n\n  for (let i = 0; i < newGestures.length; i++) {\n    const handler = preparedGesture.attachedGestures[i];\n    checkGestureCallbacksForWorklets(handler);\n\n    // Only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (newGestures[i].handlerTag !== handler.handlerTag) {\n      newGestures[i].handlerTag = handler.handlerTag;\n      newGestures[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n\n    // If amount of gesture configs changes, we need to update the callbacks in shared value\n    let shouldUpdateSharedValueIfUsed =\n      preparedGesture.attachedGestures.length !== newGestures.length;\n\n    for (let i = 0; i < newGestures.length; i++) {\n      const handler = preparedGesture.attachedGestures[i];\n\n      // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n      // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n      if (\n        handler.handlers.gestureId !== newGestures[i].handlers.gestureId &&\n        (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)\n      ) {\n        shouldUpdateSharedValueIfUsed = true;\n      }\n\n      handler.config = newGestures[i].config;\n      handler.handlers = newGestures[i].handlers;\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(\n          handler.config,\n          ALLOWED_PROPS,\n          extractGestureRelations(handler)\n        )\n      );\n\n      registerHandler(handler.handlerTag, handler, handler.config.testId);\n    }\n\n    if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n      const newHandlersValue = preparedGesture.attachedGestures\n        .filter((g) => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map((g) => g.handlers) as unknown as HandlerCallbacks<\n        Record<string, unknown>\n      >[];\n\n      preparedGesture.animatedHandlers.value = newHandlersValue;\n    }\n\n    scheduleFlushOperations();\n  });\n}\n"],"mappings":"AACA,SAASA,eAAT;AACA,OAAOC,sBAAP;AACA,SAASC,YAAT,EAAuBC,uBAAvB;AAEA,SAASC,gBAAT;AAEA,SACEC,uBADF,EAEEC,gCAFF,EAGEC,aAHF;AAMA,OAAO,SAASC,cAATA,CACLC,eADK,EAELC,aAFK,EAGLC,WAHK,EAIL;EACAD,aAAa,CAACE,OAAd;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;IAC3C,IAAME,OAAO,GAAGN,eAAe,CAACO,gBAAhB,CAAiCH,CAAjC,CAAhB;IACAP,gCAAgC,CAACS,OAAD,CAAhC;IAIA,IAAIJ,WAAW,CAACE,CAAD,CAAX,CAAeI,UAAf,KAA8BF,OAAO,CAACE,UAA1C,EAAsD;MACpDN,WAAW,CAACE,CAAD,CAAX,CAAeI,UAAf,GAA4BF,OAAO,CAACE,UAApC;MACAN,WAAW,CAACE,CAAD,CAAX,CAAeK,QAAf,CAAwBD,UAAxB,GAAqCF,OAAO,CAACE,UAA7C;IACD;EACF;EAKDb,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACK,eAAe,CAACU,SAArB,EAAgC;MAC9B;IACD;IAGD,IAAIC,6BAA6B,GAC/BX,eAAe,CAACO,gBAAhB,CAAiCF,MAAjC,KAA4CH,WAAW,CAACG,MAD1D;IAGA,KAAK,IAAID,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,EAAC,EAAzC,EAA6C;MAC3C,IAAME,QAAO,GAAGN,eAAe,CAACO,gBAAhB,CAAiCH,EAAjC,CAAhB;MAIA,IACEE,QAAO,CAACG,QAAR,CAAiBG,SAAjB,KAA+BV,WAAW,CAACE,EAAD,CAAX,CAAeK,QAAf,CAAwBG,SAAvD,KACCV,WAAW,CAACE,EAAD,CAAX,CAAeS,mBAAf,IAAsCP,QAAO,CAACO,mBAD/C,CADF,EAGE;QACAF,6BAA6B,GAAG,IAAhC;MACD;MAEDL,QAAO,CAACQ,MAAR,GAAiBZ,WAAW,CAACE,EAAD,CAAX,CAAeU,MAAhC;MACAR,QAAO,CAACG,QAAR,GAAmBP,WAAW,CAACE,EAAD,CAAX,CAAeK,QAAlC;MAEAjB,sBAAsB,CAACuB,oBAAvB,CACET,QAAO,CAACE,UADV,EAEEf,YAAY,CACVa,QAAO,CAACQ,MADE,EAEVhB,aAFU,EAGVF,uBAAuB,CAACU,QAAD,CAHb,CAFd;MASAf,eAAe,CAACe,QAAO,CAACE,UAAT,EAAqBF,QAArB,EAA8BA,QAAO,CAACQ,MAAR,CAAeE,MAA7C,CAAf;IACD;IAED,IAAIhB,eAAe,CAACiB,gBAAhB,IAAoCN,6BAAxC,EAAuE;MACrE,IAAMO,gBAAgB,GAAGlB,eAAe,CAACO,gBAAhB,CACtBY,MADsB,CACd,UAAAC,CAAD;QAAA,OAAOA,CAAC,CAACP,mBADM;MAAA,GAEtBQ,GAFsB,CAEjB,UAAAD,CAAD;QAAA,OAAOA,CAAC,CAACX,QAFS;MAAA,EAAzB;MAMAT,eAAe,CAACiB,gBAAhB,CAAiCK,KAAjC,GAAyCJ,gBAAzC;IACD;IAEDxB,uBAAuB;EACxB,CA/Ce,CAAhB;AAgDD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}