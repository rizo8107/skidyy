{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"layout\", \"screenOptions\", \"screenLayout\", \"screenListeners\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport useLatestCallback from 'use-latest-callback';\nimport { deepFreeze } from \"./deepFreeze.js\";\nimport { Group } from \"./Group.js\";\nimport { isArrayEqual } from \"./isArrayEqual.js\";\nimport { isRecordEqual } from \"./isRecordEqual.js\";\nimport { NavigationHelpersContext } from \"./NavigationHelpersContext.js\";\nimport { NavigationRouteContext } from \"./NavigationRouteContext.js\";\nimport { NavigationStateContext } from \"./NavigationStateContext.js\";\nimport { PreventRemoveProvider } from \"./PreventRemoveProvider.js\";\nimport { Screen } from \"./Screen.js\";\nimport { PrivateValueStore } from \"./types.js\";\nimport { useChildListeners } from \"./useChildListeners.js\";\nimport { useComponent } from \"./useComponent.js\";\nimport { useCurrentRender } from \"./useCurrentRender.js\";\nimport { useDescriptors } from \"./useDescriptors.js\";\nimport { useEventEmitter } from \"./useEventEmitter.js\";\nimport { useFocusedListenersChildrenAdapter } from \"./useFocusedListenersChildrenAdapter.js\";\nimport { useFocusEvents } from \"./useFocusEvents.js\";\nimport { useIsomorphicLayoutEffect } from \"./useIsomorphicLayoutEffect\";\nimport { useKeyedChildListeners } from \"./useKeyedChildListeners.js\";\nimport { useLazyValue } from \"./useLazyValue.js\";\nimport { useNavigationHelpers } from \"./useNavigationHelpers.js\";\nimport { useOnAction } from \"./useOnAction.js\";\nimport { useOnGetState } from \"./useOnGetState.js\";\nimport { useOnRouteFocus } from \"./useOnRouteFocus.js\";\nimport { useRegisterNavigator } from \"./useRegisterNavigator.js\";\nimport { useScheduleUpdate } from \"./useScheduleUpdate.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nPrivateValueStore;\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\nvar _getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions, groupLayout) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push.apply(acc, _toConsumableArray(_getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions], typeof child.props.screenLayout === 'function' ? child.props.screenLayout : groupLayout)));\n        return acc;\n      }\n    }\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) == null ? void 0 : _child$type.name}'${child.props != null && typeof child.props === 'object' && 'name' in child.props && (_child$props = child.props) != null && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n        name = _config$props.name,\n        children = _config$props.children,\n        component = _config$props.component,\n        getComponent = _config$props.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n  return configs;\n};\nexport function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n  var children = options.children,\n    layout = options.layout,\n    screenOptions = options.screenOptions,\n    screenLayout = options.screenLayout,\n    screenListeners = options.screenListeners,\n    rest = _objectWithoutProperties(options, _excluded);\n  var routeConfigs = _getRouteConfigsFromChildren(children);\n  var router = useLazyValue(function () {\n    if (rest.initialRouteName != null && routeConfigs.every(function (config) {\n      return config.props.name !== rest.initialRouteName;\n    })) {\n      throw new Error(`Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`);\n    }\n    return createRouter(rest);\n  });\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key != null ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(NavigationStateContext),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var setState = useLatestCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  });\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4, _route$params5, _route$params6;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr].props.initialParams;\n        var initialParamsFromParams = (route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.state) == null && (route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.initial) !== false && (route == null ? void 0 : (_route$params3 = route.params) == null ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route == null ? void 0 : (_route$params4 = route.params) == null ? void 0 : _route$params4.state) == null && !(typeof (route == null ? void 0 : (_route$params5 = route.params) == null ? void 0 : _route$params5.screen) === 'string' && (route == null ? void 0 : (_route$params6 = route.params) == null ? void 0 : _route$params6.initial) !== false)) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params7, _route$params8, _route$params9, _stateFromParams;\n        var stateFromParams;\n        if ((route == null ? void 0 : (_route$params7 = route.params) == null ? void 0 : _route$params7.state) != null) {\n          stateFromParams = route.params.state;\n        } else if (typeof (route == null ? void 0 : (_route$params8 = route.params) == null ? void 0 : _route$params8.screen) === 'string' && (route == null ? void 0 : (_route$params9 = route.params) == null ? void 0 : _route$params9.initial) !== false) {\n          stateFromParams = {\n            index: 0,\n            routes: [{\n              name: route.params.screen,\n              params: route.params.params,\n              path: route.params.path\n            }]\n          };\n        }\n        return [router.getRehydratedState((_stateFromParams = stateFromParams) != null ? _stateFromParams : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    var navigatorStateForNextRouteNamesChange = options.UNSTABLE_getStateForRouteNamesChange == null ? void 0 : options.UNSTABLE_getStateForRouteNamesChange(state);\n    nextState = navigatorStateForNextRouteNamesChange ? router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return name in previousRouteKeyList && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route == null ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route == null ? void 0 : route.params;\n  }, [route == null ? void 0 : route.params]);\n  if (route != null && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    stateCleanedUp.current = false;\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n  }, []);\n  var stateRef = React.useRef(state);\n  stateRef.current = state;\n  useIsomorphicLayoutEffect(function () {\n    stateRef.current = null;\n  }, []);\n  var getState = useLatestCallback(function () {\n    if (stateRef.current != null) {\n      return stateRef.current;\n    }\n    var currentState = getCurrentState();\n    return deepFreeze(isStateInitialized(currentState) ? currentState : initializedState);\n  });\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) != null && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) == null ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map == null ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener == null ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = useChildListeners(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route == null ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route == null ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var _useDescriptors = useDescriptors({\n      state: state,\n      screens: screens,\n      navigation: navigation,\n      screenOptions: screenOptions,\n      screenLayout: screenLayout,\n      onAction: onAction,\n      getState: getState,\n      setState: setState,\n      onRouteFocus: onRouteFocus,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      router: router,\n      emitter: emitter\n    }),\n    describe = _useDescriptors.describe,\n    descriptors = _useDescriptors.descriptors;\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(function (children) {\n    var element = layout != null ? layout({\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n      children: children\n    }) : children;\n    return _jsx(NavigationHelpersContext.Provider, {\n      value: navigation,\n      children: _jsx(PreventRemoveProvider, {\n        children: element\n      })\n    });\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    describe: describe,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"names":["CommonActions","React","isValidElementType","useLatestCallback","deepFreeze","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useIsomorphicLayoutEffect","useKeyedChildListeners","useLazyValue","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","jsx","_jsx","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","groupLayout","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","layout","Fragment","apply","_toConsumableArray","concat","screenOptions","screenLayout","String","process","env","NODE_ENV","forEach","config","_config$props","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","_objectWithoutProperties","_excluded","routeConfigs","router","initialRouteName","every","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","_defineProperty","getId","length","isStateValid","useCallback","state","isStateInitialized","stale","_React$useContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","useRef","current","_React$useMemo","useMemo","_route$params4","_route$params5","_route$params6","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","params","initial","screen","_objectSpread","getInitialState","_route$params7","_route$params8","_route$params9","_stateFromParams","stateFromParams","index","routes","path","getRehydratedState","_React$useMemo2","_slicedToArray","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","navigatorStateForNextRouteNamesChange","UNSTABLE_getStateForRouteNamesChange","getStateForRouteNamesChange","routeKeyChanges","filter","previousNestedParamsRef","previousParams","action","reset","navigate","updatedState","getStateForAction","shouldUpdate","stateRef","emitter","e","_ref","target","_route","find","_route2","navigation","descriptors","listeners","cb","i","self","lastIndexOf","listener","emit","data","_useChildListeners","childListeners","addListener","_useKeyedChildListene","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","_useDescriptors","describe","NavigationContent","element","Provider","value"],"sources":["f:\\Coding\\Code\\SKiddy V2\\node_modules\\@react-navigation\\core\\src\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  type DefaultRouterOptions,\n  type NavigationAction,\n  type NavigationState,\n  type ParamListBase,\n  type PartialState,\n  type Route,\n  type Router,\n  type RouterConfigOptions,\n  type RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { deepFreeze } from './deepFreeze';\nimport { Group } from './Group';\nimport { isArrayEqual } from './isArrayEqual';\nimport { isRecordEqual } from './isRecordEqual';\nimport { NavigationHelpersContext } from './NavigationHelpersContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { PreventRemoveProvider } from './PreventRemoveProvider';\nimport { Screen } from './Screen';\nimport {\n  type DefaultNavigatorOptions,\n  type EventMapBase,\n  type EventMapCore,\n  type NavigatorScreenParams,\n  PrivateValueStore,\n  type RouteConfig,\n} from './types';\nimport { useChildListeners } from './useChildListeners';\nimport { useComponent } from './useComponent';\nimport { useCurrentRender } from './useCurrentRender';\nimport { type ScreenConfigWithParent, useDescriptors } from './useDescriptors';\nimport { useEventEmitter } from './useEventEmitter';\nimport { useFocusedListenersChildrenAdapter } from './useFocusedListenersChildrenAdapter';\nimport { useFocusEvents } from './useFocusEvents';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nimport { useKeyedChildListeners } from './useKeyedChildListeners';\nimport { useLazyValue } from './useLazyValue';\nimport { useNavigationHelpers } from './useNavigationHelpers';\nimport { useOnAction } from './useOnAction';\nimport { useOnGetState } from './useOnGetState';\nimport { useOnRouteFocus } from './useOnRouteFocus';\nimport { useRegisterNavigator } from './useRegisterNavigator';\nimport { useScheduleUpdate } from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options'],\n  groupLayout?: ScreenConfigWithParent<State, ScreenOptions, EventMap>['layout']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap,\n            unknown\n          >,\n        });\n\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n                ? [...groupOptions, child.props.screenOptions]\n                : [child.props.screenOptions],\n            typeof child.props.screenLayout === 'function'\n              ? child.props.screenLayout\n              : groupLayout\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props != null &&\n              typeof child.props === 'object' &&\n              'name' in child.props &&\n              child.props?.name\n                ? ` for the screen '${child.props.name}'`\n                : ''\n            }`\n          : typeof child === 'object'\n            ? JSON.stringify(child)\n            : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, (...args: any) => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap,\n    any\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const {\n    children,\n    layout,\n    screenOptions,\n    screenLayout,\n    screenListeners,\n    ...rest\n  } = options;\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const router = useLazyValue<Router<State, any>>(() => {\n    if (\n      rest.initialRouteName != null &&\n      routeConfigs.every(\n        (config) => config.props.name !== rest.initialRouteName\n      )\n    ) {\n      throw new Error(\n        `Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`\n      );\n    }\n\n    return createRouter(rest as unknown as RouterOptions);\n  });\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const setState = useLatestCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n\n      setCurrentState(state);\n    }\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null &&\n      !(\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      )\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      let stateFromParams;\n\n      if (route?.params?.state != null) {\n        stateFromParams = route.params.state;\n      } else if (\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      ) {\n        stateFromParams = {\n          index: 0,\n          routes: [\n            {\n              name: route.params.screen,\n              params: route.params.params,\n              path: route.params.path,\n            },\n          ],\n        };\n      }\n\n      return [\n        router.getRehydratedState(\n          (stateFromParams ?? currentState) as PartialState<State>,\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initialized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    const navigatorStateForNextRouteNamesChange =\n      options.UNSTABLE_getStateForRouteNamesChange?.(state);\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = navigatorStateForNextRouteNamesChange\n      ? // @ts-expect-error this is ok\n        router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : router.getStateForRouteNamesChange(state, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n          routeKeyChanges: Object.keys(routeKeyList).filter(\n            (name) =>\n              name in previousRouteKeyList &&\n              routeKeyList[name] !== previousRouteKeyList[name]\n          ),\n        });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    // In strict mode, React will double-invoke effects.\n    // So we need to reset the flag if component was not unmounted\n    stateCleanedUp.current = false;\n\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // In some cases (e.g. route names change), internal state might have changed\n  // But it hasn't been committed yet, so hasn't propagated to the sync external store\n  // During this time, we need to return the internal state in `getState`\n  // Otherwise it can result in inconsistent state during render in children\n  // To avoid this, we use a ref for render phase, and immediately clear it on commit\n  const stateRef = React.useRef<State | null>(state);\n\n  stateRef.current = state;\n\n  useIsomorphicLayoutEffect(() => {\n    stateRef.current = null;\n  }, []);\n\n  const getState = useLatestCallback((): State => {\n    if (stateRef.current != null) {\n      return stateRef.current;\n    }\n\n    const currentState = getCurrentState();\n\n    return deepFreeze(\n      (isStateInitialized(currentState)\n        ? currentState\n        : initializedState) as State\n    );\n  });\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    const routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const { describe, descriptors } = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    screenLayout,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => {\n    const element =\n      layout != null\n        ? layout({\n            state,\n            descriptors,\n            navigation,\n            children,\n          })\n        : children;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <PreventRemoveProvider>{element}</PreventRemoveProvider>\n      </NavigationHelpersContext.Provider>\n    );\n  });\n\n  return {\n    state,\n    navigation,\n    describe,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}