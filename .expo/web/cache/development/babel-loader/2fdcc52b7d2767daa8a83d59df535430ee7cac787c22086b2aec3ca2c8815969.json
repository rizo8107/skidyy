{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef, useCallback } from 'react';\nimport { useEvent } from \"./useEvent.js\";\nimport { useSharedValue } from \"./useSharedValue.js\";\nimport { isWeb } from \"../PlatformChecker.js\";\nvar IS_WEB = isWeb();\nexport var useScrollViewOffset = IS_WEB ? useScrollViewOffsetWeb : useScrollViewOffsetNative;\nvar _worklet_7510118393752_init_data = {\n  code: \"function useScrollViewOffsetJs1(){const{animatedRef,getWebScrollableElement,offset}=this.__closure;if(animatedRef){const element=getWebScrollableElement(animatedRef.current);offset.value=element.scrollLeft===0?element.scrollTop:element.scrollLeft;}}\",\n  location: \"f:\\\\Coding\\\\Code\\\\SKiddy V2\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"useScrollViewOffsetJs1\\\",\\\"animatedRef\\\",\\\"getWebScrollableElement\\\",\\\"offset\\\",\\\"__closure\\\",\\\"element\\\",\\\"current\\\",\\\"value\\\",\\\"scrollLeft\\\",\\\"scrollTop\\\"],\\\"sources\\\":[\\\"f:/Coding/Code/SKiddy V2/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAqBmC,SAAAA,sBAAMA,CAAA,QAAAC,WAAA,CAAAC,uBAAA,CAAAC,MAAA,OAAAC,SAAA,CAGrC,GAAIH,WAAW,CAAE,CACf,KAAM,CAAAI,OAAO,CAAGH,uBAAuB,CAACD,WAAW,CAACK,OAAO,CAAC,CAE5DH,MAAM,CAACI,KAAK,CAAGF,OAAO,CAACG,UAAU,GAAK,CAAC,CAAGH,OAAO,CAACI,SAAS,CAAGJ,OAAO,CAACG,UAAU,CAClF,CAEF\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.16.2\"\n};\nfunction useScrollViewOffsetWeb(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useCallback(function () {\n    var _e = [new global.Error(), -4, -27];\n    var useScrollViewOffsetJs1 = function useScrollViewOffsetJs1() {\n      if (animatedRef) {\n        var element = getWebScrollableElement(animatedRef.current);\n        offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n      }\n    };\n    useScrollViewOffsetJs1.__closure = {\n      animatedRef: animatedRef,\n      getWebScrollableElement: getWebScrollableElement,\n      offset: offset\n    };\n    useScrollViewOffsetJs1.__workletHash = 7510118393752;\n    useScrollViewOffsetJs1.__initData = _worklet_7510118393752_init_data;\n    useScrollViewOffsetJs1.__stackDetails = _e;\n    return useScrollViewOffsetJs1;\n  }(), [animatedRef, animatedRef == null ? void 0 : animatedRef.current]);\n  useEffect(function () {\n    var element = animatedRef != null && animatedRef.current ? getWebScrollableElement(animatedRef.current) : null;\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return function () {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n  }, [animatedRef, animatedRef == null ? void 0 : animatedRef.current, eventHandler]);\n  return offset;\n}\nvar _worklet_7753704133453_init_data = {\n  code: \"function useScrollViewOffsetJs2(event){const{offset}=this.__closure;offset.value=event.contentOffset.x===0?event.contentOffset.y:event.contentOffset.x;}\",\n  location: \"f:\\\\Coding\\\\Code\\\\SKiddy V2\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"useScrollViewOffsetJs2\\\",\\\"event\\\",\\\"offset\\\",\\\"__closure\\\",\\\"value\\\",\\\"contentOffset\\\",\\\"x\\\",\\\"y\\\"],\\\"sources\\\":[\\\"f:/Coding/Code/SKiddy V2/node_modules/react-native-reanimated/lib/module/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAmDgC,SAAAA,sBAASA,CAAAC,KAAA,QAAAC,MAAA,OAAAC,SAAA,CAGrCD,MAAM,CAACE,KAAK,CAAGH,KAAK,CAACI,aAAa,CAACC,CAAC,GAAK,CAAC,CAAGL,KAAK,CAACI,aAAa,CAACE,CAAC,CAAGN,KAAK,CAACI,aAAa,CAACC,CAAC,CAC5F\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.16.2\"\n};\nfunction useScrollViewOffsetNative(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useEvent(function () {\n    var _e = [new global.Error(), -2, -27];\n    var useScrollViewOffsetJs2 = function useScrollViewOffsetJs2(event) {\n      offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n    };\n    useScrollViewOffsetJs2.__closure = {\n      offset: offset\n    };\n    useScrollViewOffsetJs2.__workletHash = 7753704133453;\n    useScrollViewOffsetJs2.__initData = _worklet_7753704133453_init_data;\n    useScrollViewOffsetJs2.__stackDetails = _e;\n    return useScrollViewOffsetJs2;\n  }(), scrollNativeEventNames);\n  useEffect(function () {\n    var _animatedRef$getTag;\n    var elementTag = (_animatedRef$getTag = animatedRef == null ? void 0 : animatedRef.getTag()) != null ? _animatedRef$getTag : null;\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return function () {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n  }, [animatedRef, animatedRef == null ? void 0 : animatedRef.current, eventHandler]);\n  return offset;\n}\nfunction getWebScrollableElement(scrollComponent) {\n  var _scrollComponent$getS;\n  return (_scrollComponent$getS = scrollComponent == null ? void 0 : scrollComponent.getScrollableNode()) != null ? _scrollComponent$getS : scrollComponent;\n}\nvar scrollNativeEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];","map":{"version":3,"names":["useEffect","useRef","useCallback","useEvent","useSharedValue","isWeb","IS_WEB","useScrollViewOffset","useScrollViewOffsetWeb","useScrollViewOffsetNative","_worklet_7510118393752_init_data","code","location","sourceMap","version","animatedRef","providedOffset","internalOffset","offset","current","eventHandler","_e","global","Error","useScrollViewOffsetJs1","element","getWebScrollableElement","value","scrollLeft","scrollTop","__closure","__workletHash","__initData","__stackDetails","addEventListener","removeEventListener","_worklet_7753704133453_init_data","useScrollViewOffsetJs2","event","contentOffset","x","y","scrollNativeEventNames","_animatedRef$getTag","elementTag","getTag","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","_scrollComponent$getS","getScrollableNode"],"sources":["f:\\Coding\\Code\\SKiddy V2\\node_modules\\react-native-reanimated\\src\\hook\\useScrollViewOffset.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef, useCallback } from 'react';\nimport type { SharedValue } from '../commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedScrollView } from '../component/ScrollView';\nimport type {\n  AnimatedRef,\n  RNNativeScrollEvent,\n  ReanimatedScrollEvent,\n} from './commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nconst IS_WEB = isWeb();\n\n/**\n * Lets you synchronously get the current offset of a `ScrollView`.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to an Animated.ScrollView component.\n * @returns A shared value which holds the current offset of the `ScrollView`.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset\n */\nexport const useScrollViewOffset = IS_WEB\n  ? useScrollViewOffsetWeb\n  : useScrollViewOffsetNative;\n\nfunction useScrollViewOffsetWeb(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current]);\n\n  useEffect(() => {\n    const element = animatedRef?.current\n      ? getWebScrollableElement(animatedRef.current)\n      : null;\n\n    if (element) {\n      element.addEventListener('scroll', eventHandler);\n    }\n    return () => {\n      if (element) {\n        element.removeEventListener('scroll', eventHandler);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollViewOffsetNative(\n  animatedRef: AnimatedRef<AnimatedScrollView> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    scrollNativeEventNames\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    const elementTag = animatedRef?.getTag() ?? null;\n\n    if (elementTag) {\n      eventHandler.workletEventHandler.registerForEvents(elementTag);\n    }\n    return () => {\n      if (elementTag) {\n        eventHandler.workletEventHandler.unregisterFromEvents(elementTag);\n      }\n    };\n    // React here has a problem with `animatedRef.current` since a Ref .current\n    // field shouldn't be used as a dependency. However, in this case we have\n    // to do it this way.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animatedRef, animatedRef?.current, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(\n  scrollComponent: AnimatedScrollView | null\n): HTMLElement {\n  return (\n    (scrollComponent?.getScrollableNode() as unknown as HTMLElement) ??\n    scrollComponent\n  );\n}\n\nconst scrollNativeEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}