{"ast":null,"code":"import { registerHandler } from \"../../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../../RNGestureHandlerModule\";\nimport { filterConfig, scheduleFlushOperations } from \"../../utils\";\nimport { ActionType } from \"../../../ActionType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ghQueueMicrotask } from \"../../../ghQueueMicrotask\";\nimport { extractGestureRelations, checkGestureCallbacksForWorklets, ALLOWED_PROPS } from \"./utils\";\nexport function attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesturesToAttach = _ref.gesturesToAttach,\n    viewTag = _ref.viewTag,\n    webEventHandlersRef = _ref.webEventHandlersRef;\n  gestureConfig.initialize();\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n  for (var handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (var _handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, extractGestureRelations(_handler)));\n    }\n    scheduleFlushOperations();\n  });\n  for (var gesture of gesturesToAttach) {\n    var actionType = gesture.shouldUseReanimated ? ActionType.REANIMATED_WORKLET : ActionType.JS_FUNCTION_NEW_API;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n    }\n  }\n  preparedGesture.attachedGestures = gesturesToAttach;\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n    preparedGesture.animatedHandlers.value = gesturesToAttach.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}","map":{"version":3,"names":["registerHandler","RNGestureHandlerModule","filterConfig","scheduleFlushOperations","ActionType","Platform","ghQueueMicrotask","extractGestureRelations","checkGestureCallbacksForWorklets","ALLOWED_PROPS","attachHandlers","_ref","preparedGesture","gestureConfig","gesturesToAttach","viewTag","webEventHandlersRef","initialize","isMounted","prepare","handler","createGestureHandler","handlerName","handlerTag","config","testId","updateGestureHandler","gesture","actionType","shouldUseReanimated","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","OS","attachGestureHandler","JS_FUNCTION_OLD_API","attachedGestures","animatedHandlers","isAnimatedGesture","g","value","filter","map","handlers"],"sources":["d:\\Code\\SKiddy V2\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\GestureDetector\\attachHandlers.ts"],"sourcesContent":["import React from 'react';\nimport { GestureType, HandlerCallbacks } from '../gesture';\nimport { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ComposedGesture } from '../gestureComposition';\nimport { ActionType } from '../../../ActionType';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../../RNGestureHandlerModule.web';\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { AttachedGestureState, WebEventHandler } from './types';\nimport {\n  extractGestureRelations,\n  checkGestureCallbacksForWorklets,\n  ALLOWED_PROPS,\n} from './utils';\n\ninterface AttachHandlersConfig {\n  preparedGesture: AttachedGestureState;\n  gestureConfig: ComposedGesture | GestureType;\n  gesturesToAttach: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nexport function attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesturesToAttach,\n  viewTag,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  gestureConfig.initialize();\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n\n  for (const handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (const handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(\n          handler.config,\n          ALLOWED_PROPS,\n          extractGestureRelations(handler)\n        )\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  for (const gesture of gesturesToAttach) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (\n        RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n      )(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // Ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n  }\n\n  preparedGesture.attachedGestures = gesturesToAttach;\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = gesturesToAttach\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAT;AACA,OAAOC,sBAAP;AACA,SAASC,YAAT,EAAuBC,uBAAvB;AAEA,SAASC,UAAT;AAAA,OAAAC,QAAA;AAGA,SAASC,gBAAT;AAEA,SACEC,uBADF,EAEEC,gCAFF,EAGEC,aAHF;AAcA,OAAO,SAASC,cAATA,CAAAC,IAAA,EAMkB;EAAA,IALvBC,eAD6B,GAAAD,IAAA,CAC7BC,eAD6B;IAE7BC,aAF6B,GAAAF,IAAA,CAE7BE,aAF6B;IAG7BC,gBAH6B,GAAAH,IAAA,CAG7BG,gBAH6B;IAI7BC,OAJ6B,GAAAJ,IAAA,CAI7BI,OAJ6B;IAK7BC,mBAAA,GAAAL,IAAA,CAAAK,mBAAA;EAEAH,aAAa,CAACI,UAAd;EAIAX,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACM,eAAe,CAACM,SAArB,EAAgC;MAC9B;IACD;IACDL,aAAa,CAACM,OAAd;EACD,CALe,CAAhB;EAOA,KAAK,IAAMC,OAAX,IAAsBN,gBAAtB,EAAwC;IACtCN,gCAAgC,CAACY,OAAD,CAAhC;IACAnB,sBAAsB,CAACoB,oBAAvB,CACED,OAAO,CAACE,WADV,EAEEF,OAAO,CAACG,UAFV,EAGErB,YAAY,CAACkB,OAAO,CAACI,MAAT,EAAiBf,aAAjB,CAHd;IAMAT,eAAe,CAACoB,OAAO,CAACG,UAAT,EAAqBH,OAArB,EAA8BA,OAAO,CAACI,MAAR,CAAeC,MAA7C,CAAf;EACD;EAIDnB,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACM,eAAe,CAACM,SAArB,EAAgC;MAC9B;IACD;IACD,KAAK,IAAME,QAAX,IAAsBN,gBAAtB,EAAwC;MACtCb,sBAAsB,CAACyB,oBAAvB,CACEN,QAAO,CAACG,UADV,EAEErB,YAAY,CACVkB,QAAO,CAACI,MADE,EAEVf,aAFU,EAGVF,uBAAuB,CAACa,QAAD,CAHb,CAFd;IAQD;IAEDjB,uBAAuB;EACxB,CAhBe,CAAhB;EAkBA,KAAK,IAAMwB,OAAX,IAAsBb,gBAAtB,EAAwC;IACtC,IAAMc,UAAU,GAAGD,OAAO,CAACE,mBAAR,GACfzB,UAAU,CAAC0B,kBADI,GAEf1B,UAAU,CAAC2B,mBAFf;IAIA,IAAI1B,QAAQ,CAAC2B,EAAT,KAAgB,KAApB,EAA2B;MAEvB/B,sBAAsB,CAACgC,oBADzB,CAGEN,OAAO,CAACJ,UAHV,EAIER,OAJF,EAKEX,UAAU,CAAC8B,mBALb,EAMElB,mBANF;IAQD,CATD,MASO;MACLf,sBAAsB,CAACgC,oBAAvB,CACEN,OAAO,CAACJ,UADV,EAEER,OAFF,EAGEa,UAHF;IAKD;EACF;EAEDhB,eAAe,CAACuB,gBAAhB,GAAmCrB,gBAAnC;EAEA,IAAIF,eAAe,CAACwB,gBAApB,EAAsC;IACpC,IAAMC,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIC,CAAD;MAAA,OAAoBA,CAAC,CAACT,mBAAhD;IAAA;IAEAjB,eAAe,CAACwB,gBAAhB,CAAiCG,KAAjC,GAAyCzB,gBAAgB,CACtD0B,MADsC,CAC/BH,iBAD+B,EAEtCI,GAFsC,CAEjC,UAAAH,CAAD;MAAA,OAAOA,CAAC,CAACI,QAFyB;IAAA,EAAzC;EAKD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}