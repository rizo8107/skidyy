{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CourseCard } from \"../components/course/CourseCard\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var SavedCoursesScreen = function SavedCoursesScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    savedCourses = _useState2[0],\n    setSavedCourses = _useState2[1];\n  var _useState3 = useState('All'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedCategory = _useState4[0],\n    setSelectedCategory = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isLoading = _useState6[0],\n    setIsLoading = _useState6[1];\n  useEffect(function () {\n    var fetchSavedCourses = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch('/api/user/saved-courses');\n          var data = yield response.json();\n          setSavedCourses(data);\n        } catch (error) {\n          console.error('Error fetching saved courses:', error);\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      return function fetchSavedCourses() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchSavedCourses();\n  }, []);\n  var categories = ['All'].concat(_toConsumableArray(new Set(savedCourses.map(function (course) {\n    return course.category;\n  }))));\n  var filteredCourses = selectedCategory === 'All' ? savedCourses : savedCourses.filter(function (course) {\n    return course.category === selectedCategory;\n  });\n  var removeCourse = function () {\n    var _ref2 = _asyncToGenerator(function* (courseId) {\n      try {\n        yield fetch(`/api/user/saved-courses/${courseId}`, {\n          method: 'DELETE'\n        });\n        setSavedCourses(function (prev) {\n          return prev.filter(function (course) {\n            return course.id !== courseId;\n          });\n        });\n      } catch (error) {\n        console.error('Error removing course:', error);\n      }\n    });\n    return function removeCourse(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Saved Courses\"\n      }), _jsxs(Text, {\n        style: styles.subtitle,\n        children: [savedCourses.length, \" courses saved\"]\n      })]\n    }), _jsx(ScrollView, {\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      style: styles.categoriesContainer,\n      children: categories.map(function (category) {\n        return _jsx(Pressable, {\n          style: [styles.categoryChip, selectedCategory === category && styles.selectedCategoryChip],\n          onPress: function onPress() {\n            return setSelectedCategory(category);\n          },\n          children: _jsx(Text, {\n            style: [styles.categoryText, selectedCategory === category && styles.selectedCategoryText],\n            children: category\n          })\n        }, category);\n      })\n    }), _jsx(ScrollView, {\n      style: styles.coursesList,\n      children: _jsx(View, {\n        style: styles.coursesGrid,\n        children: filteredCourses.map(function (course) {\n          return _jsx(View, {\n            style: styles.courseCardContainer,\n            children: _jsx(CourseCard, {\n              title: course.title,\n              category: course.category,\n              duration: course.duration,\n              rating: course.rating,\n              thumbnail: course.thumbnail,\n              instructor: course.instructor,\n              onPress: function onPress() {},\n              onRemoveFromSaved: function onRemoveFromSaved() {\n                return removeCourse(course.id);\n              }\n            })\n          }, course.id);\n        })\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F9FAFB'\n  },\n  header: {\n    padding: 24\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#111827'\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#6B7280',\n    marginTop: 4\n  },\n  categoriesContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 16\n  },\n  categoryChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#F3F4F6',\n    marginRight: 8\n  },\n  selectedCategoryChip: {\n    backgroundColor: '#7C3AED'\n  },\n  categoryText: {\n    color: '#4B5563',\n    fontSize: 14,\n    fontWeight: '500'\n  },\n  selectedCategoryText: {\n    color: '#FFFFFF'\n  },\n  coursesList: {\n    flex: 1,\n    padding: 16\n  },\n  coursesGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 16\n  },\n  courseCardContainer: {\n    width: Platform.OS === 'web' ? 'calc(33.33% - 11px)' : '100%',\n    minWidth: Platform.OS === 'web' ? 300 : 'auto'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","ScrollView","Pressable","Platform","CourseCard","jsx","_jsx","jsxs","_jsxs","SavedCoursesScreen","_useState","_useState2","_slicedToArray","savedCourses","setSavedCourses","_useState3","_useState4","selectedCategory","setSelectedCategory","_useState5","_useState6","isLoading","setIsLoading","fetchSavedCourses","_ref","_asyncToGenerator","response","fetch","data","json","error","console","apply","arguments","categories","concat","_toConsumableArray","Set","map","course","category","filteredCourses","filter","removeCourse","_ref2","courseId","method","prev","id","_x","style","styles","container","children","header","title","subtitle","length","horizontal","showsHorizontalScrollIndicator","categoriesContainer","categoryChip","selectedCategoryChip","onPress","categoryText","selectedCategoryText","coursesList","coursesGrid","courseCardContainer","duration","rating","thumbnail","instructor","onRemoveFromSaved","create","flex","backgroundColor","padding","fontSize","fontWeight","color","marginTop","paddingHorizontal","marginBottom","paddingVertical","borderRadius","marginRight","flexDirection","flexWrap","gap","width","OS","minWidth"],"sources":["f:/Coding/Code/SKiddy V2/src/screens/SavedCoursesScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScrollView, Pressable, Platform } from 'react-native';\nimport { CourseCard } from '../components/course/CourseCard';\nimport { Feather } from '@expo/vector-icons';\n\ninterface SavedCourse {\n  id: string;\n  title: string;\n  category: string;\n  duration: string;\n  rating: number;\n  thumbnail: string;\n  instructor: string;\n  tags: string[];\n}\n\nexport const SavedCoursesScreen = () => {\n  const [savedCourses, setSavedCourses] = useState<SavedCourse[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch saved courses from API\n  useEffect(() => {\n    const fetchSavedCourses = async () => {\n      try {\n        // TODO: Replace with actual API call\n        const response = await fetch('/api/user/saved-courses');\n        const data = await response.json();\n        setSavedCourses(data);\n      } catch (error) {\n        console.error('Error fetching saved courses:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSavedCourses();\n  }, []);\n\n  const categories = ['All', ...new Set(savedCourses.map(course => course.category))];\n\n  const filteredCourses = selectedCategory === 'All'\n    ? savedCourses\n    : savedCourses.filter(course => course.category === selectedCategory);\n\n  const removeCourse = async (courseId: string) => {\n    try {\n      // TODO: Replace with actual API call\n      await fetch(`/api/user/saved-courses/${courseId}`, {\n        method: 'DELETE',\n      });\n      setSavedCourses(prev => prev.filter(course => course.id !== courseId));\n    } catch (error) {\n      console.error('Error removing course:', error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Saved Courses</Text>\n        <Text style={styles.subtitle}>{savedCourses.length} courses saved</Text>\n      </View>\n\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoriesContainer}>\n        {categories.map((category) => (\n          <Pressable\n            key={category}\n            style={[\n              styles.categoryChip,\n              selectedCategory === category && styles.selectedCategoryChip,\n            ]}\n            onPress={() => setSelectedCategory(category)}\n          >\n            <Text\n              style={[\n                styles.categoryText,\n                selectedCategory === category && styles.selectedCategoryText,\n              ]}\n            >\n              {category}\n            </Text>\n          </Pressable>\n        ))}\n      </ScrollView>\n\n      <ScrollView style={styles.coursesList}>\n        <View style={styles.coursesGrid}>\n          {filteredCourses.map((course) => (\n            <View key={course.id} style={styles.courseCardContainer}>\n              <CourseCard\n                title={course.title}\n                category={course.category}\n                duration={course.duration}\n                rating={course.rating}\n                thumbnail={course.thumbnail}\n                instructor={course.instructor}\n                onPress={() => {/* Navigate to course details */}}\n                onRemoveFromSaved={() => removeCourse(course.id)}\n              />\n            </View>\n          ))}\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F9FAFB',\n  },\n  header: {\n    padding: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#111827',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#6B7280',\n    marginTop: 4,\n  },\n  categoriesContainer: {\n    paddingHorizontal: 20,\n    marginBottom: 16,\n  },\n  categoryChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#F3F4F6',\n    marginRight: 8,\n  },\n  selectedCategoryChip: {\n    backgroundColor: '#7C3AED',\n  },\n  categoryText: {\n    color: '#4B5563',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  selectedCategoryText: {\n    color: '#FFFFFF',\n  },\n  coursesList: {\n    flex: 1,\n    padding: 16,\n  },\n  coursesGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 16,\n  },\n  courseCardContainer: {\n    width: Platform.OS === 'web' ? 'calc(33.33% - 11px)' : '100%',\n    minWidth: Platform.OS === 'web' ? 300 : 'auto',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}