{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { MyCoursesScreen } from \"./src/screens/MyCoursesScreen\";\nimport { CourseDetailScreen } from \"./src/screens/CourseDetailScreen\";\nimport { SettingsScreen } from \"./src/screens/SettingsScreen\";\nimport { HelpScreen } from \"./src/screens/HelpScreen\";\nimport { CoursePlayerScreen } from \"./src/screens/CoursePlayerScreen\";\nimport { HomeScreen } from \"./src/screens/HomeScreen\";\nimport { LoginScreen } from \"./src/screens/LoginScreen\";\nimport { Sidebar } from \"./src/components/layout/Sidebar\";\nimport { Header } from \"./src/components/layout/Header\";\nimport { AuthProvider, useAuth } from \"./src/context/AuthContext\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar AppContent = function AppContent() {\n  var _useWindowDimensions = useWindowDimensions(),\n    width = _useWindowDimensions.width;\n  var isMobile = width < 768;\n  var _useState = useState('/home'),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentRoute = _useState2[0],\n    setCurrentRoute = _useState2[1];\n  var navigationRef = useNavigationContainerRef();\n  var _useAuth = useAuth(),\n    isAuthenticated = _useAuth.isAuthenticated;\n  var handleNavigation = function handleNavigation(route) {\n    var screenName = route.replace('/', '').split('-').map(function (word) {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    }).join('');\n    navigationRef.navigate(screenName);\n  };\n  if (!isAuthenticated) {\n    return _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false,\n        animation: Platform.OS === 'web' ? 'none' : 'default'\n      },\n      children: _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      })\n    });\n  }\n  return _jsxs(View, {\n    style: styles.appContainer,\n    children: [_jsx(Header, {}), _jsxs(View, {\n      style: styles.mainLayout,\n      children: [!isMobile && _jsx(Sidebar, {\n        navigation: {\n          navigate: handleNavigation\n        },\n        currentRoute: currentRoute\n      }), _jsx(View, {\n        style: styles.content,\n        children: _jsxs(Stack.Navigator, {\n          screenOptions: {\n            headerShown: false,\n            animation: Platform.OS === 'web' ? 'none' : 'default'\n          },\n          children: [_jsx(Stack.Screen, {\n            name: \"Home\",\n            component: HomeScreen\n          }), _jsx(Stack.Screen, {\n            name: \"MyCourses\",\n            component: MyCoursesScreen\n          }), _jsx(Stack.Screen, {\n            name: \"CourseDetail\",\n            component: CourseDetailScreen\n          }), _jsx(Stack.Screen, {\n            name: \"CoursePlayer\",\n            component: CoursePlayerScreen,\n            options: {\n              headerShown: false\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Settings\",\n            component: SettingsScreen\n          }), _jsx(Stack.Screen, {\n            name: \"Help\",\n            component: HelpScreen\n          })]\n        })\n      })]\n    })]\n  });\n};\nexport default function App() {\n  return _jsx(GestureHandlerRootView, {\n    style: styles.container,\n    children: _jsx(SafeAreaProvider, {\n      children: _jsx(AuthProvider, {\n        children: _jsx(NavigationContainer, {\n          ref: useNavigationContainerRef(),\n          onStateChange: function onStateChange(state) {\n            if (state) {\n              var currentScreen = state.routes[state.index].name;\n              setCurrentRoute('/' + currentScreen.toLowerCase().replace(/([A-Z])/g, '-$1').toLowerCase());\n            }\n          },\n          children: _jsx(AppContent, {})\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  appContainer: {\n    flex: 1,\n    backgroundColor: '#F9FAFB'\n  },\n  mainLayout: {\n    flex: 1,\n    flexDirection: 'row'\n  },\n  content: {\n    flex: 1\n  },\n  screenContent: {\n    backgroundColor: '#F9FAFB'\n  }\n});","map":{"version":3,"names":["React","useState","NavigationContainer","useNavigationContainerRef","createNativeStackNavigator","View","StyleSheet","Platform","useWindowDimensions","SafeAreaProvider","GestureHandlerRootView","MyCoursesScreen","CourseDetailScreen","SettingsScreen","HelpScreen","CoursePlayerScreen","HomeScreen","LoginScreen","Sidebar","Header","AuthProvider","useAuth","jsx","_jsx","jsxs","_jsxs","Stack","AppContent","_useWindowDimensions","width","isMobile","_useState","_useState2","_slicedToArray","currentRoute","setCurrentRoute","navigationRef","_useAuth","isAuthenticated","handleNavigation","route","screenName","replace","split","map","word","charAt","toUpperCase","slice","join","navigate","Navigator","screenOptions","headerShown","animation","OS","children","Screen","name","component","style","styles","appContainer","mainLayout","navigation","content","options","App","container","ref","onStateChange","state","currentScreen","routes","index","toLowerCase","create","flex","backgroundColor","flexDirection","screenContent"],"sources":["f:/Coding/Code/SKiddy V2/App.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { View, StyleSheet, Platform, useWindowDimensions } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { MyCoursesScreen } from './src/screens/MyCoursesScreen';\nimport { CourseDetailScreen } from './src/screens/CourseDetailScreen';\nimport { SettingsScreen } from './src/screens/SettingsScreen';\nimport { HelpScreen } from './src/screens/HelpScreen';\nimport { CoursePlayerScreen } from './src/screens/CoursePlayerScreen';\nimport { HomeScreen } from './src/screens/HomeScreen';\nimport { LoginScreen } from './src/screens/LoginScreen';\nimport { Sidebar } from './src/components/layout/Sidebar';\nimport { Header } from './src/components/layout/Header';\nimport { AuthProvider, useAuth } from './src/context/AuthContext';\n\nconst Stack = createNativeStackNavigator();\n\nconst AppContent = () => {\n  const { width } = useWindowDimensions();\n  const isMobile = width < 768;\n  const [currentRoute, setCurrentRoute] = useState('/home');\n  const navigationRef = useNavigationContainerRef();\n  const { isAuthenticated } = useAuth();\n\n  const handleNavigation = (route: string) => {\n    const screenName = route.replace('/', '').split('-').map(\n      word => word.charAt(0).toUpperCase() + word.slice(1)\n    ).join('');\n    navigationRef.navigate(screenName);\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <Stack.Navigator\n        screenOptions={{\n          headerShown: false,\n          animation: Platform.OS === 'web' ? 'none' : 'default',\n        }}\n      >\n        <Stack.Screen name=\"Login\" component={LoginScreen} />\n      </Stack.Navigator>\n    );\n  }\n\n  return (\n    <View style={styles.appContainer}>\n      <Header />\n      <View style={styles.mainLayout}>\n        {!isMobile && (\n          <Sidebar \n            navigation={{ navigate: handleNavigation }}\n            currentRoute={currentRoute}\n          />\n        )}\n        <View style={styles.content}>\n          <Stack.Navigator\n            screenOptions={{\n              headerShown: false,\n              animation: Platform.OS === 'web' ? 'none' : 'default',\n            }}\n          >\n            <Stack.Screen name=\"Home\" component={HomeScreen} />\n            <Stack.Screen name=\"MyCourses\" component={MyCoursesScreen} />\n            <Stack.Screen name=\"CourseDetail\" component={CourseDetailScreen} />\n            <Stack.Screen name=\"CoursePlayer\" component={CoursePlayerScreen} options={{ headerShown: false }} />\n            <Stack.Screen name=\"Settings\" component={SettingsScreen} />\n            <Stack.Screen name=\"Help\" component={HelpScreen} />\n          </Stack.Navigator>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <SafeAreaProvider>\n        <AuthProvider>\n          <NavigationContainer ref={useNavigationContainerRef()} onStateChange={(state) => {\n            if (state) {\n              const currentScreen = state.routes[state.index].name;\n              setCurrentRoute('/' + currentScreen.toLowerCase().replace(/([A-Z])/g, '-$1').toLowerCase());\n            }\n          }}>\n            <AppContent />\n          </NavigationContainer>\n        </AuthProvider>\n      </SafeAreaProvider>\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  appContainer: {\n    flex: 1,\n    backgroundColor: '#F9FAFB',\n  },\n  mainLayout: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n  content: {\n    flex: 1,\n  },\n  screenContent: {\n    backgroundColor: '#F9FAFB',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}