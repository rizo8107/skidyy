{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar EventManager = function () {\n  function EventManager(view) {\n    _classCallCheck(this, EventManager);\n    _defineProperty(this, \"view\", void 0);\n    _defineProperty(this, \"pointersInBounds\", []);\n    _defineProperty(this, \"activePointersCounter\", void 0);\n    this.view = view;\n    this.activePointersCounter = 0;\n  }\n  return _createClass(EventManager, [{\n    key: \"onPointerDown\",\n    value: function onPointerDown(_event) {}\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(_event) {}\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(_event) {}\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(_event) {}\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(_event) {}\n  }, {\n    key: \"onPointerLeave\",\n    value: function onPointerLeave(_event) {}\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(_event) {}\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(_event) {}\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(_event) {}\n  }, {\n    key: \"onPointerMoveOver\",\n    value: function onPointerMoveOver(_event) {}\n  }, {\n    key: \"onPointerMoveOut\",\n    value: function onPointerMoveOut(_event) {}\n  }, {\n    key: \"onWheel\",\n    value: function onWheel(_event) {}\n  }, {\n    key: \"setOnPointerDown\",\n    value: function setOnPointerDown(callback) {\n      this.onPointerDown = callback;\n    }\n  }, {\n    key: \"setOnPointerAdd\",\n    value: function setOnPointerAdd(callback) {\n      this.onPointerAdd = callback;\n    }\n  }, {\n    key: \"setOnPointerUp\",\n    value: function setOnPointerUp(callback) {\n      this.onPointerUp = callback;\n    }\n  }, {\n    key: \"setOnPointerRemove\",\n    value: function setOnPointerRemove(callback) {\n      this.onPointerRemove = callback;\n    }\n  }, {\n    key: \"setOnPointerMove\",\n    value: function setOnPointerMove(callback) {\n      this.onPointerMove = callback;\n    }\n  }, {\n    key: \"setOnPointerLeave\",\n    value: function setOnPointerLeave(callback) {\n      this.onPointerLeave = callback;\n    }\n  }, {\n    key: \"setOnPointerEnter\",\n    value: function setOnPointerEnter(callback) {\n      this.onPointerEnter = callback;\n    }\n  }, {\n    key: \"setOnPointerCancel\",\n    value: function setOnPointerCancel(callback) {\n      this.onPointerCancel = callback;\n    }\n  }, {\n    key: \"setOnPointerOutOfBounds\",\n    value: function setOnPointerOutOfBounds(callback) {\n      this.onPointerOutOfBounds = callback;\n    }\n  }, {\n    key: \"setOnPointerMoveOver\",\n    value: function setOnPointerMoveOver(callback) {\n      this.onPointerMoveOver = callback;\n    }\n  }, {\n    key: \"setOnPointerMoveOut\",\n    value: function setOnPointerMoveOut(callback) {\n      this.onPointerMoveOut = callback;\n    }\n  }, {\n    key: \"setOnWheel\",\n    value: function setOnWheel(callback) {\n      this.onWheel = callback;\n    }\n  }, {\n    key: \"markAsInBounds\",\n    value: function markAsInBounds(pointerId) {\n      if (this.pointersInBounds.indexOf(pointerId) >= 0) {\n        return;\n      }\n      this.pointersInBounds.push(pointerId);\n    }\n  }, {\n    key: \"markAsOutOfBounds\",\n    value: function markAsOutOfBounds(pointerId) {\n      var index = this.pointersInBounds.indexOf(pointerId);\n      if (index < 0) {\n        return;\n      }\n      this.pointersInBounds.splice(index, 1);\n    }\n  }, {\n    key: \"resetManager\",\n    value: function resetManager() {\n      this.activePointersCounter = 0;\n      this.pointersInBounds = [];\n    }\n  }]);\n}();\nexport { EventManager as default };","map":{"version":3,"names":["EventManager","view","_classCallCheck","_defineProperty","activePointersCounter","_createClass","key","value","onPointerDown","_event","onPointerAdd","onPointerUp","onPointerRemove","onPointerMove","onPointerLeave","onPointerEnter","onPointerCancel","onPointerOutOfBounds","onPointerMoveOver","onPointerMoveOut","onWheel","setOnPointerDown","callback","setOnPointerAdd","setOnPointerUp","setOnPointerRemove","setOnPointerMove","setOnPointerLeave","setOnPointerEnter","setOnPointerCancel","setOnPointerOutOfBounds","setOnPointerMoveOver","setOnPointerMoveOut","setOnWheel","markAsInBounds","pointerId","pointersInBounds","indexOf","push","markAsOutOfBounds","index","splice","resetManager","default"],"sources":["f:\\Coding\\Code\\SKiddy V2\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\EventManager.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { AdaptedEvent, EventTypes } from '../interfaces';\n\ntype PointerEventCallback = (event: AdaptedEvent) => void;\n\nexport default abstract class EventManager<T> {\n  protected readonly view: T;\n  protected pointersInBounds: number[] = [];\n  protected activePointersCounter: number;\n\n  constructor(view: T) {\n    this.view = view;\n    this.activePointersCounter = 0;\n  }\n\n  public abstract registerListeners(): void;\n  public abstract unregisterListeners(): void;\n\n  protected abstract mapEvent(\n    event: Event,\n    eventType: EventTypes\n  ): AdaptedEvent;\n\n  protected onPointerDown(_event: AdaptedEvent): void {}\n  protected onPointerAdd(_event: AdaptedEvent): void {}\n  protected onPointerUp(_event: AdaptedEvent): void {}\n  protected onPointerRemove(_event: AdaptedEvent): void {}\n  protected onPointerMove(_event: AdaptedEvent): void {}\n  protected onPointerLeave(_event: AdaptedEvent): void {} // Called only when pointer is pressed (or touching)\n  protected onPointerEnter(_event: AdaptedEvent): void {} // Called only when pointer is pressed (or touching)\n  protected onPointerCancel(_event: AdaptedEvent): void {\n    // When pointer cancel is triggered and there are more pointers on the view, only one pointer is cancelled\n    // Because we want all pointers to be cancelled by that event, we are doing it manually by reseting handler and changing activePointersCounter to 0\n    // Events that correspond to removing the pointer (pointerup, touchend) have condition, that they don't perform any action when activePointersCounter\n    // is equal to 0. This prevents counter from going to negative values, when pointers are removed from view after one of them has been cancelled\n  }\n  protected onPointerOutOfBounds(_event: AdaptedEvent): void {}\n  protected onPointerMoveOver(_event: AdaptedEvent): void {}\n  protected onPointerMoveOut(_event: AdaptedEvent): void {}\n  protected onWheel(_event: AdaptedEvent): void {}\n\n  public setOnPointerDown(callback: PointerEventCallback): void {\n    this.onPointerDown = callback;\n  }\n  public setOnPointerAdd(callback: PointerEventCallback): void {\n    this.onPointerAdd = callback;\n  }\n  public setOnPointerUp(callback: PointerEventCallback): void {\n    this.onPointerUp = callback;\n  }\n  public setOnPointerRemove(callback: PointerEventCallback): void {\n    this.onPointerRemove = callback;\n  }\n  public setOnPointerMove(callback: PointerEventCallback): void {\n    this.onPointerMove = callback;\n  }\n  public setOnPointerLeave(callback: PointerEventCallback): void {\n    this.onPointerLeave = callback;\n  }\n  public setOnPointerEnter(callback: PointerEventCallback): void {\n    this.onPointerEnter = callback;\n  }\n  public setOnPointerCancel(callback: PointerEventCallback): void {\n    this.onPointerCancel = callback;\n  }\n  public setOnPointerOutOfBounds(callback: PointerEventCallback): void {\n    this.onPointerOutOfBounds = callback;\n  }\n  public setOnPointerMoveOver(callback: PointerEventCallback): void {\n    this.onPointerMoveOver = callback;\n  }\n  public setOnPointerMoveOut(callback: PointerEventCallback): void {\n    this.onPointerMoveOut = callback;\n  }\n  public setOnWheel(callback: PointerEventCallback): void {\n    this.onWheel = callback;\n  }\n\n  protected markAsInBounds(pointerId: number): void {\n    if (this.pointersInBounds.indexOf(pointerId) >= 0) {\n      return;\n    }\n\n    this.pointersInBounds.push(pointerId);\n  }\n\n  protected markAsOutOfBounds(pointerId: number): void {\n    const index: number = this.pointersInBounds.indexOf(pointerId);\n\n    if (index < 0) {\n      return;\n    }\n\n    this.pointersInBounds.splice(index, 1);\n  }\n\n  public resetManager(): void {\n    // Reseting activePointersCounter is necessary to make gestures such as pinch work properly\n    // There are gestures that end when there is still one active pointer (like pinch/rotation)\n    // When these gestures end, they are reset, but they still receive events from pointer that is active\n    // This causes trouble, since only onPointerDown registers gesture in orchestrator, and while gestures receive\n    // Events from active pointer after they finished, next pointerdown event will be registered as additional pointer, not the first one\n    // This casues trouble like gestures getting stuck in END state, even though they should have gone to UNDETERMINED\n\n    this.activePointersCounter = 0;\n    this.pointersInBounds = [];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}