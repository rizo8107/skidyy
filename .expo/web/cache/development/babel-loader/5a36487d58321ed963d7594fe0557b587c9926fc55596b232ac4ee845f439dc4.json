{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/classPrivateFieldLooseKey\";\nimport { has } from \"./utils.js\";\nimport { WorkletEventHandler } from \"../WorkletEventHandler.js\";\nimport { findNodeHandle } from \"../platformFunctions/findNodeHandle\";\nvar _managedComponent = _classPrivateFieldLooseKey(\"managedComponent\");\nvar _componentOptions = _classPrivateFieldLooseKey(\"componentOptions\");\nvar _eventViewTag = _classPrivateFieldLooseKey(\"eventViewTag\");\nexport var NativeEventsManager = function () {\n  function NativeEventsManager(component, options) {\n    _classCallCheck(this, NativeEventsManager);\n    Object.defineProperty(this, _managedComponent, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _componentOptions, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _eventViewTag, {\n      writable: true,\n      value: -1\n    });\n    _classPrivateFieldLooseBase(this, _managedComponent)[_managedComponent] = component;\n    _classPrivateFieldLooseBase(this, _componentOptions)[_componentOptions] = options;\n    _classPrivateFieldLooseBase(this, _eventViewTag)[_eventViewTag] = this.getEventViewTag();\n  }\n  return _createClass(NativeEventsManager, [{\n    key: \"attachEvents\",\n    value: function attachEvents() {\n      var _this = this;\n      executeForEachEventHandler(_classPrivateFieldLooseBase(this, _managedComponent)[_managedComponent].props, function (key, handler) {\n        handler.registerForEvents(_classPrivateFieldLooseBase(_this, _eventViewTag)[_eventViewTag], key);\n      });\n    }\n  }, {\n    key: \"detachEvents\",\n    value: function detachEvents() {\n      var _this2 = this;\n      executeForEachEventHandler(_classPrivateFieldLooseBase(this, _managedComponent)[_managedComponent].props, function (_key, handler) {\n        handler.unregisterFromEvents(_classPrivateFieldLooseBase(_this2, _eventViewTag)[_eventViewTag]);\n      });\n    }\n  }, {\n    key: \"updateEvents\",\n    value: function updateEvents(prevProps) {\n      var _this3 = this;\n      var computedEventTag = this.getEventViewTag();\n      if (_classPrivateFieldLooseBase(this, _eventViewTag)[_eventViewTag] !== computedEventTag) {\n        executeForEachEventHandler(prevProps, function (_key, handler) {\n          handler.unregisterFromEvents(_classPrivateFieldLooseBase(_this3, _eventViewTag)[_eventViewTag]);\n        });\n        _classPrivateFieldLooseBase(this, _eventViewTag)[_eventViewTag] = computedEventTag;\n        this.attachEvents();\n        return;\n      }\n      executeForEachEventHandler(prevProps, function (key, prevHandler) {\n        var newProp = _classPrivateFieldLooseBase(_this3, _managedComponent)[_managedComponent].props[key];\n        if (!newProp) {\n          prevHandler.unregisterFromEvents(_classPrivateFieldLooseBase(_this3, _eventViewTag)[_eventViewTag]);\n        } else if (isWorkletEventHandler(newProp) && newProp.workletEventHandler !== prevHandler) {\n          prevHandler.unregisterFromEvents(_classPrivateFieldLooseBase(_this3, _eventViewTag)[_eventViewTag]);\n          newProp.workletEventHandler.registerForEvents(_classPrivateFieldLooseBase(_this3, _eventViewTag)[_eventViewTag]);\n        }\n      });\n      executeForEachEventHandler(_classPrivateFieldLooseBase(this, _managedComponent)[_managedComponent].props, function (key, handler) {\n        if (!prevProps[key]) {\n          handler.registerForEvents(_classPrivateFieldLooseBase(_this3, _eventViewTag)[_eventViewTag]);\n        }\n      });\n    }\n  }, {\n    key: \"getEventViewTag\",\n    value: function getEventViewTag() {\n      var componentAnimatedRef = _classPrivateFieldLooseBase(this, _managedComponent)[_managedComponent]._component;\n      var newTag;\n      if (componentAnimatedRef.getScrollableNode) {\n        var _findNodeHandle;\n        var scrollableNode = componentAnimatedRef.getScrollableNode();\n        newTag = (_findNodeHandle = findNodeHandle(scrollableNode)) != null ? _findNodeHandle : -1;\n      } else {\n        var _findNodeHandle2, _classPrivateFieldLoo;\n        newTag = (_findNodeHandle2 = findNodeHandle((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _componentOptions)[_componentOptions]) != null && _classPrivateFieldLoo.setNativeProps ? _classPrivateFieldLooseBase(this, _managedComponent)[_managedComponent] : componentAnimatedRef)) != null ? _findNodeHandle2 : -1;\n      }\n      return newTag;\n    }\n  }]);\n}();\nfunction isWorkletEventHandler(prop) {\n  return has('workletEventHandler', prop) && prop.workletEventHandler instanceof WorkletEventHandler;\n}\nfunction executeForEachEventHandler(props, callback) {\n  for (var key in props) {\n    var prop = props[key];\n    if (isWorkletEventHandler(prop)) {\n      callback(key, prop.workletEventHandler);\n    }\n  }\n}","map":{"version":3,"names":["_classCallCheck","_createClass","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","has","WorkletEventHandler","findNodeHandle","_managedComponent","_componentOptions","_eventViewTag","NativeEventsManager","component","options","Object","defineProperty","writable","value","getEventViewTag","key","attachEvents","_this","executeForEachEventHandler","props","handler","registerForEvents","detachEvents","_this2","_key","unregisterFromEvents","updateEvents","prevProps","_this3","computedEventTag","prevHandler","newProp","isWorkletEventHandler","workletEventHandler","componentAnimatedRef","_component","newTag","getScrollableNode","_findNodeHandle","scrollableNode","_findNodeHandle2","_classPrivateFieldLoo","setNativeProps","prop","callback"],"sources":["d:\\Code\\SKiddy V2\\node_modules\\react-native-reanimated\\src\\createAnimatedComponent\\NativeEventsManager.ts"],"sourcesContent":["'use strict';\nimport type {\n  INativeEventsManager,\n  IAnimatedComponentInternal,\n  AnimatedComponentProps,\n  InitialComponentProps,\n  AnimatedComponentRef,\n} from './commonTypes';\nimport { has } from './utils';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\n\nexport class NativeEventsManager implements INativeEventsManager {\n  readonly #managedComponent: ManagedAnimatedComponent;\n  readonly #componentOptions?: ComponentOptions;\n  #eventViewTag = -1;\n\n  constructor(component: ManagedAnimatedComponent, options?: ComponentOptions) {\n    this.#managedComponent = component;\n    this.#componentOptions = options;\n    this.#eventViewTag = this.getEventViewTag();\n  }\n\n  public attachEvents() {\n    executeForEachEventHandler(this.#managedComponent.props, (key, handler) => {\n      handler.registerForEvents(this.#eventViewTag, key);\n    });\n  }\n\n  public detachEvents() {\n    executeForEachEventHandler(\n      this.#managedComponent.props,\n      (_key, handler) => {\n        handler.unregisterFromEvents(this.#eventViewTag);\n      }\n    );\n  }\n\n  public updateEvents(\n    prevProps: AnimatedComponentProps<InitialComponentProps>\n  ) {\n    const computedEventTag = this.getEventViewTag();\n    // If the event view tag changes, we need to completely re-mount all events\n    if (this.#eventViewTag !== computedEventTag) {\n      // Remove all bindings from previous props that ran on the old viewTag\n      executeForEachEventHandler(prevProps, (_key, handler) => {\n        handler.unregisterFromEvents(this.#eventViewTag);\n      });\n      // We don't need to unregister from current (new) props, because their events weren't registered yet\n      // Replace the view tag\n      this.#eventViewTag = computedEventTag;\n      // Attach the events with a new viewTag\n      this.attachEvents();\n      return;\n    }\n\n    executeForEachEventHandler(prevProps, (key, prevHandler) => {\n      const newProp = this.#managedComponent.props[key];\n      if (!newProp) {\n        // Prop got deleted\n        prevHandler.unregisterFromEvents(this.#eventViewTag);\n      } else if (\n        isWorkletEventHandler(newProp) &&\n        newProp.workletEventHandler !== prevHandler\n      ) {\n        // Prop got changed\n        prevHandler.unregisterFromEvents(this.#eventViewTag);\n        newProp.workletEventHandler.registerForEvents(this.#eventViewTag);\n      }\n    });\n\n    executeForEachEventHandler(this.#managedComponent.props, (key, handler) => {\n      if (!prevProps[key]) {\n        // Prop got added\n        handler.registerForEvents(this.#eventViewTag);\n      }\n    });\n  }\n\n  private getEventViewTag() {\n    // Get the tag for registering events - since the event emitting view can be nested inside the main component\n    const componentAnimatedRef = this.#managedComponent\n      ._component as AnimatedComponentRef;\n    let newTag: number;\n    if (componentAnimatedRef.getScrollableNode) {\n      const scrollableNode = componentAnimatedRef.getScrollableNode();\n      newTag = findNodeHandle(scrollableNode) ?? -1;\n    } else {\n      newTag =\n        findNodeHandle(\n          this.#componentOptions?.setNativeProps\n            ? this.#managedComponent\n            : componentAnimatedRef\n        ) ?? -1;\n    }\n    return newTag;\n  }\n}\n\nfunction isWorkletEventHandler(\n  prop: unknown\n): prop is WorkletEventHandlerHolder {\n  return (\n    has('workletEventHandler', prop) &&\n    prop.workletEventHandler instanceof WorkletEventHandler\n  );\n}\n\nfunction executeForEachEventHandler(\n  props: AnimatedComponentProps<InitialComponentProps>,\n  callback: (\n    key: string,\n    handler: InstanceType<typeof WorkletEventHandler>\n  ) => void\n) {\n  for (const key in props) {\n    const prop = props[key];\n    if (isWorkletEventHandler(prop)) {\n      callback(key, prop.workletEventHandler);\n    }\n  }\n}\n\ntype ManagedAnimatedComponent = React.Component<\n  AnimatedComponentProps<InitialComponentProps>\n> &\n  IAnimatedComponentInternal;\n\ntype ComponentOptions = {\n  setNativeProps: (\n    ref: AnimatedComponentRef,\n    props: InitialComponentProps\n  ) => void;\n};\n\ntype WorkletEventHandlerHolder = {\n  workletEventHandler: InstanceType<typeof WorkletEventHandler>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}