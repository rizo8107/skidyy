{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var lightColors = {\n  background: '#F9FAFB',\n  surface: '#FFFFFF',\n  text: '#111827',\n  textSecondary: '#6B7280',\n  border: '#E5E7EB',\n  primary: '#4F46E5',\n  primaryDark: '#4338CA',\n  error: '#DC2626',\n  success: '#059669'\n};\nexport var darkColors = {\n  background: '#111827',\n  surface: '#1F2937',\n  text: '#F9FAFB',\n  textSecondary: '#9CA3AF',\n  border: '#374151',\n  primary: '#6366F1',\n  primaryDark: '#4F46E5',\n  error: '#EF4444',\n  success: '#10B981'\n};\nvar ThemeContext = createContext({\n  isDarkMode: false,\n  toggleTheme: function toggleTheme() {},\n  colors: lightColors\n});\nexport var useTheme = function useTheme() {\n  return useContext(ThemeContext);\n};\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDarkMode = _useState2[0],\n    setIsDarkMode = _useState2[1];\n  useEffect(function () {\n    var loadTheme = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var storedTheme = yield AsyncStorage.getItem('isDarkMode');\n          if (storedTheme !== null) {\n            setIsDarkMode(storedTheme === 'true');\n          }\n        } catch (error) {\n          console.error('Error loading theme:', error);\n        }\n      });\n      return function loadTheme() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    loadTheme();\n  }, []);\n  var toggleTheme = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var newTheme = !isDarkMode;\n        setIsDarkMode(newTheme);\n        yield AsyncStorage.setItem('isDarkMode', String(newTheme));\n      } catch (error) {\n        console.error('Error saving theme:', error);\n      }\n    });\n    return function toggleTheme() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var colors = isDarkMode ? darkColors : lightColors;\n  return _jsx(ThemeContext.Provider, {\n    value: {\n      isDarkMode: isDarkMode,\n      toggleTheme: toggleTheme,\n      colors: colors\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","jsx","_jsx","lightColors","background","surface","text","textSecondary","border","primary","primaryDark","error","success","darkColors","ThemeContext","isDarkMode","toggleTheme","colors","useTheme","ThemeProvider","_ref","children","_useState","_useState2","_slicedToArray","setIsDarkMode","loadTheme","_ref2","_asyncToGenerator","storedTheme","getItem","console","apply","arguments","_ref3","newTheme","setItem","String","Provider","value"],"sources":["f:/Coding/Code/SKiddy V2/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface ThemeContextType {\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n  colors: typeof lightColors;\n}\n\nexport const lightColors = {\n  background: '#F9FAFB',\n  surface: '#FFFFFF',\n  text: '#111827',\n  textSecondary: '#6B7280',\n  border: '#E5E7EB',\n  primary: '#4F46E5',\n  primaryDark: '#4338CA',\n  error: '#DC2626',\n  success: '#059669',\n};\n\nexport const darkColors = {\n  background: '#111827',\n  surface: '#1F2937',\n  text: '#F9FAFB',\n  textSecondary: '#9CA3AF',\n  border: '#374151',\n  primary: '#6366F1',\n  primaryDark: '#4F46E5',\n  error: '#EF4444',\n  success: '#10B981',\n};\n\nconst ThemeContext = createContext<ThemeContextType>({\n  isDarkMode: false,\n  toggleTheme: () => {},\n  colors: lightColors,\n});\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    // Load theme preference from storage\n    const loadTheme = async () => {\n      try {\n        const storedTheme = await AsyncStorage.getItem('isDarkMode');\n        if (storedTheme !== null) {\n          setIsDarkMode(storedTheme === 'true');\n        }\n      } catch (error) {\n        console.error('Error loading theme:', error);\n      }\n    };\n\n    loadTheme();\n  }, []);\n\n  const toggleTheme = async () => {\n    try {\n      const newTheme = !isDarkMode;\n      setIsDarkMode(newTheme);\n      await AsyncStorage.setItem('isDarkMode', String(newTheme));\n    } catch (error) {\n      console.error('Error saving theme:', error);\n    }\n  };\n\n  const colors = isDarkMode ? darkColors : lightColors;\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme, colors }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}