{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { WebView } from 'react-native-webview';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var VideoPlayer = function VideoPlayer(_ref) {\n  var videoId = _ref.videoId,\n    accessToken = _ref.accessToken,\n    onComplete = _ref.onComplete,\n    onProgress = _ref.onProgress,\n    onTimeUpdate = _ref.onTimeUpdate,\n    _ref$initialProgress = _ref.initialProgress,\n    initialProgress = _ref$initialProgress === void 0 ? 0 : _ref$initialProgress;\n  var webViewRef = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFullscreen = _useState2[0],\n    setIsFullscreen = _useState2[1];\n  var getEmbedUrl = function getEmbedUrl() {\n    return `https://app.tpstreams.com/embed/6u448b/${videoId}/?access_token=${accessToken}`;\n  };\n  var onMessage = function onMessage(event) {\n    try {\n      var data = JSON.parse(event.nativeEvent.data);\n      switch (data.type) {\n        case 'progress':\n          onProgress == null ? void 0 : onProgress(data.value);\n          break;\n        case 'timeupdate':\n          onTimeUpdate == null ? void 0 : onTimeUpdate(data.value);\n          break;\n        case 'complete':\n          onComplete == null ? void 0 : onComplete();\n          break;\n      }\n    } catch (error) {\n      console.error('Error parsing WebView message:', error);\n    }\n  };\n  var injectedJavaScript = `\n    const video = document.querySelector('video');\n    if (video) {\n      video.currentTime = ${initialProgress};\n      \n      video.addEventListener('timeupdate', () => {\n        const progress = video.currentTime / video.duration;\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          type: 'progress',\n          value: progress\n        }));\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          type: 'timeupdate',\n          value: video.currentTime\n        }));\n      });\n\n      video.addEventListener('ended', () => {\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          type: 'complete'\n        }));\n      });\n    }\n    true;\n  `;\n  return _jsx(View, {\n    style: [styles.container, isFullscreen && styles.fullscreen],\n    children: _jsx(WebView, {\n      ref: webViewRef,\n      source: {\n        uri: getEmbedUrl()\n      },\n      style: styles.webview,\n      allowsFullscreenVideo: true,\n      mediaPlaybackRequiresUserAction: false,\n      javaScriptEnabled: true,\n      onMessage: onMessage,\n      injectedJavaScript: injectedJavaScript,\n      scrollEnabled: false,\n      androidLayerType: \"hardware\"\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    borderRadius: 12,\n    overflow: 'hidden'\n  },\n  webview: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  fullscreen: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 999\n  }\n});","map":{"version":3,"names":["React","useState","useRef","View","StyleSheet","WebView","jsx","_jsx","VideoPlayer","_ref","videoId","accessToken","onComplete","onProgress","onTimeUpdate","_ref$initialProgress","initialProgress","webViewRef","_useState","_useState2","_slicedToArray","isFullscreen","setIsFullscreen","getEmbedUrl","onMessage","event","data","JSON","parse","nativeEvent","type","value","error","console","injectedJavaScript","style","styles","container","fullscreen","children","ref","source","uri","webview","allowsFullscreenVideo","mediaPlaybackRequiresUserAction","javaScriptEnabled","scrollEnabled","androidLayerType","create","flex","backgroundColor","borderRadius","overflow","position","top","left","right","bottom","zIndex"],"sources":["d:/Code/SKiddy V2/src/components/video/VideoPlayer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { WebView } from 'react-native-webview';\n\ninterface VideoPlayerProps {\n  videoId: string;\n  accessToken: string;\n  onComplete?: () => void;\n  onProgress?: (progress: number) => void;\n  onTimeUpdate?: (time: number) => void;\n  initialProgress?: number;\n}\n\nexport const VideoPlayer = ({\n  videoId,\n  accessToken,\n  onComplete,\n  onProgress,\n  onTimeUpdate,\n  initialProgress = 0,\n}: VideoPlayerProps) => {\n  const webViewRef = useRef<WebView>(null);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const getEmbedUrl = () => {\n    return `https://app.tpstreams.com/embed/6u448b/${videoId}/?access_token=${accessToken}`;\n  };\n\n  // Handle messages from the WebView\n  const onMessage = (event: any) => {\n    try {\n      const data = JSON.parse(event.nativeEvent.data);\n      switch (data.type) {\n        case 'progress':\n          onProgress?.(data.value);\n          break;\n        case 'timeupdate':\n          onTimeUpdate?.(data.value);\n          break;\n        case 'complete':\n          onComplete?.();\n          break;\n      }\n    } catch (error) {\n      console.error('Error parsing WebView message:', error);\n    }\n  };\n\n  // Inject JavaScript to handle video events\n  const injectedJavaScript = `\n    const video = document.querySelector('video');\n    if (video) {\n      video.currentTime = ${initialProgress};\n      \n      video.addEventListener('timeupdate', () => {\n        const progress = video.currentTime / video.duration;\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          type: 'progress',\n          value: progress\n        }));\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          type: 'timeupdate',\n          value: video.currentTime\n        }));\n      });\n\n      video.addEventListener('ended', () => {\n        window.ReactNativeWebView.postMessage(JSON.stringify({\n          type: 'complete'\n        }));\n      });\n    }\n    true;\n  `;\n\n  return (\n    <View style={[styles.container, isFullscreen && styles.fullscreen]}>\n      <WebView\n        ref={webViewRef}\n        source={{ uri: getEmbedUrl() }}\n        style={styles.webview}\n        allowsFullscreenVideo={true}\n        mediaPlaybackRequiresUserAction={false}\n        javaScriptEnabled={true}\n        onMessage={onMessage}\n        injectedJavaScript={injectedJavaScript}\n        scrollEnabled={false}\n        androidLayerType=\"hardware\"\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    borderRadius: 12,\n    overflow: 'hidden',\n  },\n  webview: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  fullscreen: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 999,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}